/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var hammerjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hammerjs */ \"./node_modules/hammerjs/hammer.js\");\n/* harmony import */ var hammerjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(hammerjs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _src_js_iscroll__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/js/iscroll */ \"./src/js/iscroll.js\");\n/* harmony import */ var _src_js_tmripple__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/js/tmripple */ \"./src/js/tmripple.js\");\n\n\n\nconst POPUP_VISIBLE_CLASS = 'visible';\n\nfunction documentPreventDefault(event) {\n  const mc = new hammerjs__WEBPACK_IMPORTED_MODULE_0___default.a(document);\n  mc.on('pan', event => event.preventDefault());\n}\n\nfunction initScrolls() {\n  initLiquidsScroll();\n  initPartnersPopupScroll();\n}\n\nfunction initLiquidsScroll() {\n  const liquidsEl = document.getElementById('liquids');\n  const liquidsScroll = new _src_js_iscroll__WEBPACK_IMPORTED_MODULE_1__[\"default\"](liquidsEl, {\n    scrollX: true,\n    scrollY: false,\n    mouseWheel: true,\n    preventDefault: false\n  });\n}\n\nfunction initPartnersPopupScroll() {\n  const partnersPopupEl = document.querySelector('#popups .popup.partners .popup-content');\n  const liquidsScroll = new _src_js_iscroll__WEBPACK_IMPORTED_MODULE_1__[\"default\"](partnersPopupEl, {\n    scrollX: false,\n    scrollY: true,\n    mouseWheel: true,\n    preventDefault: true\n  });\n}\n\nfunction initTmripples() {\n  const tmripples = new _src_js_tmripple__WEBPACK_IMPORTED_MODULE_2__[\"default\"]('#partner', {\n    color: '#fff'\n  });\n}\n\nfunction initPopups() {\n  function openPopupHandler(event) {\n    const popupId = this.dataset.openPopupName;\n    popupWrapper.classList.add(POPUP_VISIBLE_CLASS);\n    popupWrapper.querySelector(`[data-popup-name=\"${popupId}\"]`).classList.add(POPUP_VISIBLE_CLASS);\n  }\n\n  function closePopupHandler(event) {\n    const popupId = this.dataset.closePopupName;\n    popupWrapper.classList.remove(POPUP_VISIBLE_CLASS);\n    popupWrapper.querySelector(`[data-popup-name=\"${popupId}\"]`).classList.remove(POPUP_VISIBLE_CLASS);\n  }\n\n  const popupWrapper = document.getElementById('popups');\n  const popupOpenButtons = document.querySelectorAll('[data-open-popup-name]');\n  const popupCloseButtons = document.querySelectorAll('[data-close-popup-name]');\n  popupOpenButtons.forEach(buttonEl => {\n    const mc = new hammerjs__WEBPACK_IMPORTED_MODULE_0___default.a(buttonEl);\n    mc.on('tap', openPopupHandler.bind(buttonEl));\n  });\n  popupCloseButtons.forEach(buttonEl => {\n    const mc = new hammerjs__WEBPACK_IMPORTED_MODULE_0___default.a(buttonEl);\n    mc.on('tap', closePopupHandler.bind(buttonEl));\n  });\n}\n\ndocumentPreventDefault();\ninitScrolls();\ninitTmripples();\ninitPopups();\n\n//# sourceURL=webpack:///./index.js?");

/***/ }),

/***/ "./node_modules/hammerjs/hammer.js":
/*!*****************************************!*\
  !*** ./node_modules/hammerjs/hammer.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function (window, document, exportName, undefined) {\n  'use strict';\n\n  var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\n  var TEST_ELEMENT = document.createElement('div');\n  var TYPE_FUNCTION = 'function';\n  var round = Math.round;\n  var abs = Math.abs;\n  var now = Date.now;\n  /**\n   * set a timeout with a given scope\n   * @param {Function} fn\n   * @param {Number} timeout\n   * @param {Object} context\n   * @returns {number}\n   */\n\n  function setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n  }\n  /**\n   * if the argument is an array, we want to execute the fn on each entry\n   * if it aint an array we don't want to do a thing.\n   * this is used by all the methods that accept a single and array argument.\n   * @param {*|Array} arg\n   * @param {String} fn\n   * @param {Object} [context]\n   * @returns {Boolean}\n   */\n\n\n  function invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n      each(arg, context[fn], context);\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * walk objects and arrays\n   * @param {Object} obj\n   * @param {Function} iterator\n   * @param {Object} context\n   */\n\n\n  function each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n      return;\n    }\n\n    if (obj.forEach) {\n      obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n      i = 0;\n\n      while (i < obj.length) {\n        iterator.call(context, obj[i], i, obj);\n        i++;\n      }\n    } else {\n      for (i in obj) {\n        obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n      }\n    }\n  }\n  /**\n   * wrap a method with a deprecation warning and stack trace\n   * @param {Function} method\n   * @param {String} name\n   * @param {String} message\n   * @returns {Function} A new function wrapping the supplied method.\n   */\n\n\n  function deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function () {\n      var e = new Error('get-stack-trace');\n      var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '').replace(/^\\s+at\\s+/gm, '').replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n      var log = window.console && (window.console.warn || window.console.log);\n\n      if (log) {\n        log.call(window.console, deprecationMessage, stack);\n      }\n\n      return method.apply(this, arguments);\n    };\n  }\n  /**\n   * extend object.\n   * means that properties in dest will be overwritten by the ones in src.\n   * @param {Object} target\n   * @param {...Object} objects_to_assign\n   * @returns {Object} target\n   */\n\n\n  var assign;\n\n  if (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n      if (target === undefined || target === null) {\n        throw new TypeError('Cannot convert undefined or null to object');\n      }\n\n      var output = Object(target);\n\n      for (var index = 1; index < arguments.length; index++) {\n        var source = arguments[index];\n\n        if (source !== undefined && source !== null) {\n          for (var nextKey in source) {\n            if (source.hasOwnProperty(nextKey)) {\n              output[nextKey] = source[nextKey];\n            }\n          }\n        }\n      }\n\n      return output;\n    };\n  } else {\n    assign = Object.assign;\n  }\n  /**\n   * extend object.\n   * means that properties in dest will be overwritten by the ones in src.\n   * @param {Object} dest\n   * @param {Object} src\n   * @param {Boolean} [merge=false]\n   * @returns {Object} dest\n   */\n\n\n  var extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n\n    while (i < keys.length) {\n      if (!merge || merge && dest[keys[i]] === undefined) {\n        dest[keys[i]] = src[keys[i]];\n      }\n\n      i++;\n    }\n\n    return dest;\n  }, 'extend', 'Use `assign`.');\n  /**\n   * merge the values from src in the dest.\n   * means that properties that exist in dest will not be overwritten by src\n   * @param {Object} dest\n   * @param {Object} src\n   * @returns {Object} dest\n   */\n\n  var merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n  }, 'merge', 'Use `assign`.');\n  /**\n   * simple class inheritance\n   * @param {Function} child\n   * @param {Function} base\n   * @param {Object} [properties]\n   */\n\n  function inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n      assign(childP, properties);\n    }\n  }\n  /**\n   * simple function bind\n   * @param {Function} fn\n   * @param {Object} context\n   * @returns {Function}\n   */\n\n\n  function bindFn(fn, context) {\n    return function boundFn() {\n      return fn.apply(context, arguments);\n    };\n  }\n  /**\n   * let a boolean value also be a function that must return a boolean\n   * this first item in args will be used as the context\n   * @param {Boolean|Function} val\n   * @param {Array} [args]\n   * @returns {Boolean}\n   */\n\n\n  function boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n      return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n\n    return val;\n  }\n  /**\n   * use the val2 when val1 is undefined\n   * @param {*} val1\n   * @param {*} val2\n   * @returns {*}\n   */\n\n\n  function ifUndefined(val1, val2) {\n    return val1 === undefined ? val2 : val1;\n  }\n  /**\n   * addEventListener with multiple events at once\n   * @param {EventTarget} target\n   * @param {String} types\n   * @param {Function} handler\n   */\n\n\n  function addEventListeners(target, types, handler) {\n    each(splitStr(types), function (type) {\n      target.addEventListener(type, handler, false);\n    });\n  }\n  /**\n   * removeEventListener with multiple events at once\n   * @param {EventTarget} target\n   * @param {String} types\n   * @param {Function} handler\n   */\n\n\n  function removeEventListeners(target, types, handler) {\n    each(splitStr(types), function (type) {\n      target.removeEventListener(type, handler, false);\n    });\n  }\n  /**\n   * find if a node is in the given parent\n   * @method hasParent\n   * @param {HTMLElement} node\n   * @param {HTMLElement} parent\n   * @return {Boolean} found\n   */\n\n\n  function hasParent(node, parent) {\n    while (node) {\n      if (node == parent) {\n        return true;\n      }\n\n      node = node.parentNode;\n    }\n\n    return false;\n  }\n  /**\n   * small indexOf wrapper\n   * @param {String} str\n   * @param {String} find\n   * @returns {Boolean} found\n   */\n\n\n  function inStr(str, find) {\n    return str.indexOf(find) > -1;\n  }\n  /**\n   * split string on whitespace\n   * @param {String} str\n   * @returns {Array} words\n   */\n\n\n  function splitStr(str) {\n    return str.trim().split(/\\s+/g);\n  }\n  /**\n   * find if a array contains the object using indexOf or a simple polyFill\n   * @param {Array} src\n   * @param {String} find\n   * @param {String} [findByKey]\n   * @return {Boolean|Number} false when not found, or the index\n   */\n\n\n  function inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n      return src.indexOf(find);\n    } else {\n      var i = 0;\n\n      while (i < src.length) {\n        if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) {\n          return i;\n        }\n\n        i++;\n      }\n\n      return -1;\n    }\n  }\n  /**\n   * convert array-like objects to real arrays\n   * @param {Object} obj\n   * @returns {Array}\n   */\n\n\n  function toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n  }\n  /**\n   * unique array with objects based on a key (like 'id') or just by the array's value\n   * @param {Array} src [{id:1},{id:2},{id:1}]\n   * @param {String} [key]\n   * @param {Boolean} [sort=False]\n   * @returns {Array} [{id:1},{id:2}]\n   */\n\n\n  function uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n      var val = key ? src[i][key] : src[i];\n\n      if (inArray(values, val) < 0) {\n        results.push(src[i]);\n      }\n\n      values[i] = val;\n      i++;\n    }\n\n    if (sort) {\n      if (!key) {\n        results = results.sort();\n      } else {\n        results = results.sort(function sortUniqueArray(a, b) {\n          return a[key] > b[key];\n        });\n      }\n    }\n\n    return results;\n  }\n  /**\n   * get the prefixed property\n   * @param {Object} obj\n   * @param {String} property\n   * @returns {String|Undefined} prefixed\n   */\n\n\n  function prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n    var i = 0;\n\n    while (i < VENDOR_PREFIXES.length) {\n      prefix = VENDOR_PREFIXES[i];\n      prop = prefix ? prefix + camelProp : property;\n\n      if (prop in obj) {\n        return prop;\n      }\n\n      i++;\n    }\n\n    return undefined;\n  }\n  /**\n   * get a unique id\n   * @returns {number} uniqueId\n   */\n\n\n  var _uniqueId = 1;\n\n  function uniqueId() {\n    return _uniqueId++;\n  }\n  /**\n   * get the window object of an element\n   * @param {HTMLElement} element\n   * @returns {DocumentView|Window}\n   */\n\n\n  function getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return doc.defaultView || doc.parentWindow || window;\n  }\n\n  var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n  var SUPPORT_TOUCH = 'ontouchstart' in window;\n  var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\n  var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n  var INPUT_TYPE_TOUCH = 'touch';\n  var INPUT_TYPE_PEN = 'pen';\n  var INPUT_TYPE_MOUSE = 'mouse';\n  var INPUT_TYPE_KINECT = 'kinect';\n  var COMPUTE_INTERVAL = 25;\n  var INPUT_START = 1;\n  var INPUT_MOVE = 2;\n  var INPUT_END = 4;\n  var INPUT_CANCEL = 8;\n  var DIRECTION_NONE = 1;\n  var DIRECTION_LEFT = 2;\n  var DIRECTION_RIGHT = 4;\n  var DIRECTION_UP = 8;\n  var DIRECTION_DOWN = 16;\n  var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\n  var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\n  var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n  var PROPS_XY = ['x', 'y'];\n  var PROPS_CLIENT_XY = ['clientX', 'clientY'];\n  /**\n   * create new input type manager\n   * @param {Manager} manager\n   * @param {Function} callback\n   * @returns {Input}\n   * @constructor\n   */\n\n  function Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget; // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n\n    this.domHandler = function (ev) {\n      if (boolOrFn(manager.options.enable, [manager])) {\n        self.handler(ev);\n      }\n    };\n\n    this.init();\n  }\n\n  Input.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function () {},\n\n    /**\n     * bind the events\n     */\n    init: function () {\n      this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n      this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n      this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function () {\n      this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n      this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n      this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n  };\n  /**\n   * create new input type manager\n   * called by the Manager constructor\n   * @param {Hammer} manager\n   * @returns {Input}\n   */\n\n  function createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n      Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n      Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n      Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n      Type = MouseInput;\n    } else {\n      Type = TouchMouseInput;\n    }\n\n    return new Type(manager, inputHandler);\n  }\n  /**\n   * handle input events\n   * @param {Manager} manager\n   * @param {String} eventType\n   * @param {Object} input\n   */\n\n\n  function inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;\n    var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n      manager.session = {};\n    } // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n\n\n    input.eventType = eventType; // compute scale, rotation etc\n\n    computeInputData(manager, input); // emit secret event\n\n    manager.emit('hammer.input', input);\n    manager.recognize(input);\n    manager.session.prevInput = input;\n  }\n  /**\n   * extend the data with some usable properties like scale, rotate, velocity etc\n   * @param {Object} manager\n   * @param {Object} input\n   */\n\n\n  function computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length; // store the first input to calculate the distance and direction\n\n    if (!session.firstInput) {\n      session.firstInput = simpleCloneInputData(input);\n    } // to compute scale and rotation we need to store the multiple touches\n\n\n    if (pointersLength > 1 && !session.firstMultiple) {\n      session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n      session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n    input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;\n    computeIntervalInputData(session, input); // find the correct target\n\n    var target = manager.element;\n\n    if (hasParent(input.srcEvent.target, target)) {\n      target = input.srcEvent.target;\n    }\n\n    input.target = target;\n  }\n\n  function computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n      prevDelta = session.prevDelta = {\n        x: prevInput.deltaX || 0,\n        y: prevInput.deltaY || 0\n      };\n      offset = session.offsetDelta = {\n        x: center.x,\n        y: center.y\n      };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n  }\n  /**\n   * velocity is calculated every x ms\n   * @param {Object} session\n   * @param {Object} input\n   */\n\n\n  function computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity,\n        velocityX,\n        velocityY,\n        direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n      var deltaX = input.deltaX - last.deltaX;\n      var deltaY = input.deltaY - last.deltaY;\n      var v = getVelocity(deltaTime, deltaX, deltaY);\n      velocityX = v.x;\n      velocityY = v.y;\n      velocity = abs(v.x) > abs(v.y) ? v.x : v.y;\n      direction = getDirection(deltaX, deltaY);\n      session.lastInterval = input;\n    } else {\n      // use latest velocity info if it doesn't overtake a minimum period\n      velocity = last.velocity;\n      velocityX = last.velocityX;\n      velocityY = last.velocityY;\n      direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n  }\n  /**\n   * create a simple clone from the input used for storage of firstInput and firstMultiple\n   * @param {Object} input\n   * @returns {Object} clonedInputData\n   */\n\n\n  function simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n\n    while (i < input.pointers.length) {\n      pointers[i] = {\n        clientX: round(input.pointers[i].clientX),\n        clientY: round(input.pointers[i].clientY)\n      };\n      i++;\n    }\n\n    return {\n      timeStamp: now(),\n      pointers: pointers,\n      center: getCenter(pointers),\n      deltaX: input.deltaX,\n      deltaY: input.deltaY\n    };\n  }\n  /**\n   * get the center of all the pointers\n   * @param {Array} pointers\n   * @return {Object} center contains `x` and `y` properties\n   */\n\n\n  function getCenter(pointers) {\n    var pointersLength = pointers.length; // no need to loop when only one touch\n\n    if (pointersLength === 1) {\n      return {\n        x: round(pointers[0].clientX),\n        y: round(pointers[0].clientY)\n      };\n    }\n\n    var x = 0,\n        y = 0,\n        i = 0;\n\n    while (i < pointersLength) {\n      x += pointers[i].clientX;\n      y += pointers[i].clientY;\n      i++;\n    }\n\n    return {\n      x: round(x / pointersLength),\n      y: round(y / pointersLength)\n    };\n  }\n  /**\n   * calculate the velocity between two points. unit is in px per ms.\n   * @param {Number} deltaTime\n   * @param {Number} x\n   * @param {Number} y\n   * @return {Object} velocity `x` and `y`\n   */\n\n\n  function getVelocity(deltaTime, x, y) {\n    return {\n      x: x / deltaTime || 0,\n      y: y / deltaTime || 0\n    };\n  }\n  /**\n   * get the direction between two points\n   * @param {Number} x\n   * @param {Number} y\n   * @return {Number} direction\n   */\n\n\n  function getDirection(x, y) {\n    if (x === y) {\n      return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n      return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n  }\n  /**\n   * calculate the absolute distance between two points\n   * @param {Object} p1 {x, y}\n   * @param {Object} p2 {x, y}\n   * @param {Array} [props] containing x and y keys\n   * @return {Number} distance\n   */\n\n\n  function getDistance(p1, p2, props) {\n    if (!props) {\n      props = PROPS_XY;\n    }\n\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.sqrt(x * x + y * y);\n  }\n  /**\n   * calculate the angle between two coordinates\n   * @param {Object} p1\n   * @param {Object} p2\n   * @param {Array} [props] containing x and y keys\n   * @return {Number} angle\n   */\n\n\n  function getAngle(p1, p2, props) {\n    if (!props) {\n      props = PROPS_XY;\n    }\n\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n  }\n  /**\n   * calculate the rotation degrees between two pointersets\n   * @param {Array} start array of pointers\n   * @param {Array} end array of pointers\n   * @return {Number} rotation\n   */\n\n\n  function getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n  }\n  /**\n   * calculate the scale factor between two pointersets\n   * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n   * @param {Array} start array of pointers\n   * @param {Array} end array of pointers\n   * @return {Number} scale\n   */\n\n\n  function getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n  }\n\n  var MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n  };\n  var MOUSE_ELEMENT_EVENTS = 'mousedown';\n  var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n  /**\n   * Mouse events input\n   * @constructor\n   * @extends Input\n   */\n\n  function MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n  }\n\n  inherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n      var eventType = MOUSE_INPUT_MAP[ev.type]; // on start we want to have the left mouse button down\n\n      if (eventType & INPUT_START && ev.button === 0) {\n        this.pressed = true;\n      }\n\n      if (eventType & INPUT_MOVE && ev.which !== 1) {\n        eventType = INPUT_END;\n      } // mouse must be down\n\n\n      if (!this.pressed) {\n        return;\n      }\n\n      if (eventType & INPUT_END) {\n        this.pressed = false;\n      }\n\n      this.callback(this.manager, eventType, {\n        pointers: [ev],\n        changedPointers: [ev],\n        pointerType: INPUT_TYPE_MOUSE,\n        srcEvent: ev\n      });\n    }\n  });\n  var POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n  }; // in IE10 the pointer types is defined as an enum\n\n  var IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n\n  };\n  var POINTER_ELEMENT_EVENTS = 'pointerdown';\n  var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel'; // IE10 has prefixed support, and case-sensitive\n\n  if (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n  }\n  /**\n   * Pointer events input\n   * @constructor\n   * @extends Input\n   */\n\n\n  function PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n    Input.apply(this, arguments);\n    this.store = this.manager.session.pointerEvents = [];\n  }\n\n  inherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n      var store = this.store;\n      var removePointer = false;\n      var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n      var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n      var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n      var isTouch = pointerType == INPUT_TYPE_TOUCH; // get index of the event in the store\n\n      var storeIndex = inArray(store, ev.pointerId, 'pointerId'); // start and mouse must be down\n\n      if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n        if (storeIndex < 0) {\n          store.push(ev);\n          storeIndex = store.length - 1;\n        }\n      } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        removePointer = true;\n      } // it not found, so the pointer hasn't been down (so it's probably a hover)\n\n\n      if (storeIndex < 0) {\n        return;\n      } // update the event in the store\n\n\n      store[storeIndex] = ev;\n      this.callback(this.manager, eventType, {\n        pointers: store,\n        changedPointers: [ev],\n        pointerType: pointerType,\n        srcEvent: ev\n      });\n\n      if (removePointer) {\n        // remove from the store\n        store.splice(storeIndex, 1);\n      }\n    }\n  });\n  var SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n  };\n  var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\n  var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n  /**\n   * Touch events input\n   * @constructor\n   * @extends Input\n   */\n\n  function SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n    Input.apply(this, arguments);\n  }\n\n  inherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n      var type = SINGLE_TOUCH_INPUT_MAP[ev.type]; // should we handle the touch events?\n\n      if (type === INPUT_START) {\n        this.started = true;\n      }\n\n      if (!this.started) {\n        return;\n      }\n\n      var touches = normalizeSingleTouches.call(this, ev, type); // when done, reset the started state\n\n      if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n        this.started = false;\n      }\n\n      this.callback(this.manager, type, {\n        pointers: touches[0],\n        changedPointers: touches[1],\n        pointerType: INPUT_TYPE_TOUCH,\n        srcEvent: ev\n      });\n    }\n  });\n  /**\n   * @this {TouchInput}\n   * @param {Object} ev\n   * @param {Number} type flag\n   * @returns {undefined|Array} [all, changed]\n   */\n\n  function normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n      all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n  }\n\n  var TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n  };\n  var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n  /**\n   * Multi-user touch events input\n   * @constructor\n   * @extends Input\n   */\n\n  function TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n    Input.apply(this, arguments);\n  }\n\n  inherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n      var type = TOUCH_INPUT_MAP[ev.type];\n      var touches = getTouches.call(this, ev, type);\n\n      if (!touches) {\n        return;\n      }\n\n      this.callback(this.manager, type, {\n        pointers: touches[0],\n        changedPointers: touches[1],\n        pointerType: INPUT_TYPE_TOUCH,\n        srcEvent: ev\n      });\n    }\n  });\n  /**\n   * @this {TouchInput}\n   * @param {Object} ev\n   * @param {Number} type flag\n   * @returns {undefined|Array} [all, changed]\n   */\n\n  function getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds; // when there is only one touch, the process can be simplified\n\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n      targetIds[allTouches[0].identifier] = true;\n      return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target; // get target touches from touches\n\n    targetTouches = allTouches.filter(function (touch) {\n      return hasParent(touch.target, target);\n    }); // collect touches\n\n    if (type === INPUT_START) {\n      i = 0;\n\n      while (i < targetTouches.length) {\n        targetIds[targetTouches[i].identifier] = true;\n        i++;\n      }\n    } // filter changed touches to only contain touches that exist in the collected target ids\n\n\n    i = 0;\n\n    while (i < changedTouches.length) {\n      if (targetIds[changedTouches[i].identifier]) {\n        changedTargetTouches.push(changedTouches[i]);\n      } // cleanup removed touches\n\n\n      if (type & (INPUT_END | INPUT_CANCEL)) {\n        delete targetIds[changedTouches[i].identifier];\n      }\n\n      i++;\n    }\n\n    if (!changedTargetTouches.length) {\n      return;\n    }\n\n    return [// merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n    uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true), changedTargetTouches];\n  }\n  /**\n   * Combined touch and mouse input\n   *\n   * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n   * This because touch devices also emit mouse events while doing a touch.\n   *\n   * @constructor\n   * @extends Input\n   */\n\n\n  var DEDUP_TIMEOUT = 2500;\n  var DEDUP_DISTANCE = 25;\n\n  function TouchMouseInput() {\n    Input.apply(this, arguments);\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n    this.primaryTouch = null;\n    this.lastTouches = [];\n  }\n\n  inherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n      var isTouch = inputData.pointerType == INPUT_TYPE_TOUCH,\n          isMouse = inputData.pointerType == INPUT_TYPE_MOUSE;\n\n      if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n        return;\n      } // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n\n\n      if (isTouch) {\n        recordTouches.call(this, inputEvent, inputData);\n      } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n        return;\n      }\n\n      this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n      this.touch.destroy();\n      this.mouse.destroy();\n    }\n  });\n\n  function recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n      this.primaryTouch = eventData.changedPointers[0].identifier;\n      setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n      setLastTouch.call(this, eventData);\n    }\n  }\n\n  function setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n      var lastTouch = {\n        x: touch.clientX,\n        y: touch.clientY\n      };\n      this.lastTouches.push(lastTouch);\n      var lts = this.lastTouches;\n\n      var removeLastTouch = function () {\n        var i = lts.indexOf(lastTouch);\n\n        if (i > -1) {\n          lts.splice(i, 1);\n        }\n      };\n\n      setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n  }\n\n  function isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX,\n        y = eventData.srcEvent.clientY;\n\n    for (var i = 0; i < this.lastTouches.length; i++) {\n      var t = this.lastTouches[i];\n      var dx = Math.abs(x - t.x),\n          dy = Math.abs(y - t.y);\n\n      if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\n  var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined; // magical touchAction value\n\n  var TOUCH_ACTION_COMPUTE = 'compute';\n  var TOUCH_ACTION_AUTO = 'auto';\n  var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\n\n  var TOUCH_ACTION_NONE = 'none';\n  var TOUCH_ACTION_PAN_X = 'pan-x';\n  var TOUCH_ACTION_PAN_Y = 'pan-y';\n  var TOUCH_ACTION_MAP = getTouchActionProps();\n  /**\n   * Touch Action\n   * sets the touchAction property or uses the js alternative\n   * @param {Manager} manager\n   * @param {String} value\n   * @constructor\n   */\n\n  function TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n  }\n\n  TouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function (value) {\n      // find out the touch-action by the event handlers\n      if (value == TOUCH_ACTION_COMPUTE) {\n        value = this.compute();\n      }\n\n      if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n        this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n      }\n\n      this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function () {\n      this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function () {\n      var actions = [];\n      each(this.manager.recognizers, function (recognizer) {\n        if (boolOrFn(recognizer.options.enable, [recognizer])) {\n          actions = actions.concat(recognizer.getTouchAction());\n        }\n      });\n      return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function (input) {\n      var srcEvent = input.srcEvent;\n      var direction = input.offsetDirection; // if the touch action did prevented once this session\n\n      if (this.manager.session.prevented) {\n        srcEvent.preventDefault();\n        return;\n      }\n\n      var actions = this.actions;\n      var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n      var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n      var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n      if (hasNone) {\n        //do not prevent defaults if this is a tap gesture\n        var isTapPointer = input.pointers.length === 1;\n        var isTapMovement = input.distance < 2;\n        var isTapTouchTime = input.deltaTime < 250;\n\n        if (isTapPointer && isTapMovement && isTapTouchTime) {\n          return;\n        }\n      }\n\n      if (hasPanX && hasPanY) {\n        // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n        return;\n      }\n\n      if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) {\n        return this.preventSrc(srcEvent);\n      }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function (srcEvent) {\n      this.manager.session.prevented = true;\n      srcEvent.preventDefault();\n    }\n  };\n  /**\n   * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n   * @param {String} actions\n   * @returns {*}\n   */\n\n  function cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n      return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y); // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n\n    if (hasPanX && hasPanY) {\n      return TOUCH_ACTION_NONE;\n    } // pan-x OR pan-y\n\n\n    if (hasPanX || hasPanY) {\n      return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    } // manipulation\n\n\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n      return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n  }\n\n  function getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n      return false;\n    }\n\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function (val) {\n      // If css.supports is not supported but there is native touch-action assume it supports\n      // all values. This is the case for IE 10 and 11.\n      touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n  }\n  /**\n   * Recognizer flow explained; *\n   * All recognizers have the initial state of POSSIBLE when a input session starts.\n   * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n   * Example session for mouse-input: mousedown -> mousemove -> mouseup\n   *\n   * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n   * which determines with state it should be.\n   *\n   * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n   * POSSIBLE to give it another change on the next cycle.\n   *\n   *               Possible\n   *                  |\n   *            +-----+---------------+\n   *            |                     |\n   *      +-----+-----+               |\n   *      |           |               |\n   *   Failed      Cancelled          |\n   *                          +-------+------+\n   *                          |              |\n   *                      Recognized       Began\n   *                                         |\n   *                                      Changed\n   *                                         |\n   *                                  Ended/Recognized\n   */\n\n\n  var STATE_POSSIBLE = 1;\n  var STATE_BEGAN = 2;\n  var STATE_CHANGED = 4;\n  var STATE_ENDED = 8;\n  var STATE_RECOGNIZED = STATE_ENDED;\n  var STATE_CANCELLED = 16;\n  var STATE_FAILED = 32;\n  /**\n   * Recognizer\n   * Every recognizer needs to extend from this class.\n   * @constructor\n   * @param {Object} options\n   */\n\n  function Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n    this.id = uniqueId();\n    this.manager = null; // default is enable true\n\n    this.options.enable = ifUndefined(this.options.enable, true);\n    this.state = STATE_POSSIBLE;\n    this.simultaneous = {};\n    this.requireFail = [];\n  }\n\n  Recognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function (options) {\n      assign(this.options, options); // also update the touchAction, in case something changed about the directions/enabled state\n\n      this.manager && this.manager.touchAction.update();\n      return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function (otherRecognizer) {\n      if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n        return this;\n      }\n\n      var simultaneous = this.simultaneous;\n      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\n      if (!simultaneous[otherRecognizer.id]) {\n        simultaneous[otherRecognizer.id] = otherRecognizer;\n        otherRecognizer.recognizeWith(this);\n      }\n\n      return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function (otherRecognizer) {\n      if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n        return this;\n      }\n\n      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n      delete this.simultaneous[otherRecognizer.id];\n      return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function (otherRecognizer) {\n      if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n        return this;\n      }\n\n      var requireFail = this.requireFail;\n      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\n      if (inArray(requireFail, otherRecognizer) === -1) {\n        requireFail.push(otherRecognizer);\n        otherRecognizer.requireFailure(this);\n      }\n\n      return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function (otherRecognizer) {\n      if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n        return this;\n      }\n\n      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n      var index = inArray(this.requireFail, otherRecognizer);\n\n      if (index > -1) {\n        this.requireFail.splice(index, 1);\n      }\n\n      return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function () {\n      return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function (otherRecognizer) {\n      return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function (input) {\n      var self = this;\n      var state = this.state;\n\n      function emit(event) {\n        self.manager.emit(event, input);\n      } // 'panstart' and 'panmove'\n\n\n      if (state < STATE_ENDED) {\n        emit(self.options.event + stateStr(state));\n      }\n\n      emit(self.options.event); // simple 'eventName' events\n\n      if (input.additionalEvent) {\n        // additional event(panleft, panright, pinchin, pinchout...)\n        emit(input.additionalEvent);\n      } // panend and pancancel\n\n\n      if (state >= STATE_ENDED) {\n        emit(self.options.event + stateStr(state));\n      }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function (input) {\n      if (this.canEmit()) {\n        return this.emit(input);\n      } // it's failing anyway\n\n\n      this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function () {\n      var i = 0;\n\n      while (i < this.requireFail.length) {\n        if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n          return false;\n        }\n\n        i++;\n      }\n\n      return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function (inputData) {\n      // make a new copy of the inputData\n      // so we can change the inputData without messing up the other recognizers\n      var inputDataClone = assign({}, inputData); // is is enabled and allow recognizing?\n\n      if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n        this.reset();\n        this.state = STATE_FAILED;\n        return;\n      } // reset when we've reached the end\n\n\n      if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n        this.state = STATE_POSSIBLE;\n      }\n\n      this.state = this.process(inputDataClone); // the recognizer has recognized a gesture\n      // so trigger an event\n\n      if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n        this.tryEmit(inputDataClone);\n      }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function (inputData) {},\n    // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function () {},\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function () {}\n  };\n  /**\n   * get a usable string, used as event postfix\n   * @param {Const} state\n   * @returns {String} state\n   */\n\n  function stateStr(state) {\n    if (state & STATE_CANCELLED) {\n      return 'cancel';\n    } else if (state & STATE_ENDED) {\n      return 'end';\n    } else if (state & STATE_CHANGED) {\n      return 'move';\n    } else if (state & STATE_BEGAN) {\n      return 'start';\n    }\n\n    return '';\n  }\n  /**\n   * direction cons to string\n   * @param {Const} direction\n   * @returns {String}\n   */\n\n\n  function directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n      return 'down';\n    } else if (direction == DIRECTION_UP) {\n      return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n      return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n      return 'right';\n    }\n\n    return '';\n  }\n  /**\n   * get a recognizer by name if it is bound to a manager\n   * @param {Recognizer|String} otherRecognizer\n   * @param {Recognizer} recognizer\n   * @returns {Recognizer}\n   */\n\n\n  function getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n\n    if (manager) {\n      return manager.get(otherRecognizer);\n    }\n\n    return otherRecognizer;\n  }\n  /**\n   * This recognizer is just used as a base for the simple attribute recognizers.\n   * @constructor\n   * @extends Recognizer\n   */\n\n\n  function AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n  }\n\n  inherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n      /**\n       * @type {Number}\n       * @default 1\n       */\n      pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function (input) {\n      var optionPointers = this.options.pointers;\n      return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function (input) {\n      var state = this.state;\n      var eventType = input.eventType;\n      var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n      var isValid = this.attrTest(input); // on cancel input and we've recognized before, return STATE_CANCELLED\n\n      if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n        return state | STATE_CANCELLED;\n      } else if (isRecognized || isValid) {\n        if (eventType & INPUT_END) {\n          return state | STATE_ENDED;\n        } else if (!(state & STATE_BEGAN)) {\n          return STATE_BEGAN;\n        }\n\n        return state | STATE_CHANGED;\n      }\n\n      return STATE_FAILED;\n    }\n  });\n  /**\n   * Pan\n   * Recognized when the pointer is down and moved in the allowed direction.\n   * @constructor\n   * @extends AttrRecognizer\n   */\n\n  function PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n    this.pX = null;\n    this.pY = null;\n  }\n\n  inherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n      event: 'pan',\n      threshold: 10,\n      pointers: 1,\n      direction: DIRECTION_ALL\n    },\n    getTouchAction: function () {\n      var direction = this.options.direction;\n      var actions = [];\n\n      if (direction & DIRECTION_HORIZONTAL) {\n        actions.push(TOUCH_ACTION_PAN_Y);\n      }\n\n      if (direction & DIRECTION_VERTICAL) {\n        actions.push(TOUCH_ACTION_PAN_X);\n      }\n\n      return actions;\n    },\n    directionTest: function (input) {\n      var options = this.options;\n      var hasMoved = true;\n      var distance = input.distance;\n      var direction = input.direction;\n      var x = input.deltaX;\n      var y = input.deltaY; // lock to axis?\n\n      if (!(direction & options.direction)) {\n        if (options.direction & DIRECTION_HORIZONTAL) {\n          direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n          hasMoved = x != this.pX;\n          distance = Math.abs(input.deltaX);\n        } else {\n          direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n          hasMoved = y != this.pY;\n          distance = Math.abs(input.deltaY);\n        }\n      }\n\n      input.direction = direction;\n      return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n    attrTest: function (input) {\n      return AttrRecognizer.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));\n    },\n    emit: function (input) {\n      this.pX = input.deltaX;\n      this.pY = input.deltaY;\n      var direction = directionStr(input.direction);\n\n      if (direction) {\n        input.additionalEvent = this.options.event + direction;\n      }\n\n      this._super.emit.call(this, input);\n    }\n  });\n  /**\n   * Pinch\n   * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n   * @constructor\n   * @extends AttrRecognizer\n   */\n\n  function PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n  }\n\n  inherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n      event: 'pinch',\n      threshold: 0,\n      pointers: 2\n    },\n    getTouchAction: function () {\n      return [TOUCH_ACTION_NONE];\n    },\n    attrTest: function (input) {\n      return this._super.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n    emit: function (input) {\n      if (input.scale !== 1) {\n        var inOut = input.scale < 1 ? 'in' : 'out';\n        input.additionalEvent = this.options.event + inOut;\n      }\n\n      this._super.emit.call(this, input);\n    }\n  });\n  /**\n   * Press\n   * Recognized when the pointer is down for x ms without any movement.\n   * @constructor\n   * @extends Recognizer\n   */\n\n  function PressRecognizer() {\n    Recognizer.apply(this, arguments);\n    this._timer = null;\n    this._input = null;\n  }\n\n  inherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n      event: 'press',\n      pointers: 1,\n      time: 251,\n      // minimal time of the pointer to be pressed\n      threshold: 9 // a minimal movement is ok, but keep it low\n\n    },\n    getTouchAction: function () {\n      return [TOUCH_ACTION_AUTO];\n    },\n    process: function (input) {\n      var options = this.options;\n      var validPointers = input.pointers.length === options.pointers;\n      var validMovement = input.distance < options.threshold;\n      var validTime = input.deltaTime > options.time;\n      this._input = input; // we only allow little movement\n      // and we've reached an end event, so a tap is possible\n\n      if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {\n        this.reset();\n      } else if (input.eventType & INPUT_START) {\n        this.reset();\n        this._timer = setTimeoutContext(function () {\n          this.state = STATE_RECOGNIZED;\n          this.tryEmit();\n        }, options.time, this);\n      } else if (input.eventType & INPUT_END) {\n        return STATE_RECOGNIZED;\n      }\n\n      return STATE_FAILED;\n    },\n    reset: function () {\n      clearTimeout(this._timer);\n    },\n    emit: function (input) {\n      if (this.state !== STATE_RECOGNIZED) {\n        return;\n      }\n\n      if (input && input.eventType & INPUT_END) {\n        this.manager.emit(this.options.event + 'up', input);\n      } else {\n        this._input.timeStamp = now();\n        this.manager.emit(this.options.event, this._input);\n      }\n    }\n  });\n  /**\n   * Rotate\n   * Recognized when two or more pointer are moving in a circular motion.\n   * @constructor\n   * @extends AttrRecognizer\n   */\n\n  function RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n  }\n\n  inherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n      event: 'rotate',\n      threshold: 0,\n      pointers: 2\n    },\n    getTouchAction: function () {\n      return [TOUCH_ACTION_NONE];\n    },\n    attrTest: function (input) {\n      return this._super.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n  });\n  /**\n   * Swipe\n   * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n   * @constructor\n   * @extends AttrRecognizer\n   */\n\n  function SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n  }\n\n  inherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n      event: 'swipe',\n      threshold: 10,\n      velocity: 0.3,\n      direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n      pointers: 1\n    },\n    getTouchAction: function () {\n      return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n    attrTest: function (input) {\n      var direction = this.options.direction;\n      var velocity;\n\n      if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n        velocity = input.overallVelocity;\n      } else if (direction & DIRECTION_HORIZONTAL) {\n        velocity = input.overallVelocityX;\n      } else if (direction & DIRECTION_VERTICAL) {\n        velocity = input.overallVelocityY;\n      }\n\n      return this._super.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers == this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n    emit: function (input) {\n      var direction = directionStr(input.offsetDirection);\n\n      if (direction) {\n        this.manager.emit(this.options.event + direction, input);\n      }\n\n      this.manager.emit(this.options.event, input);\n    }\n  });\n  /**\n   * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n   * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n   * a single tap.\n   *\n   * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n   * multi-taps being recognized.\n   * @constructor\n   * @extends Recognizer\n   */\n\n  function TapRecognizer() {\n    Recognizer.apply(this, arguments); // previous time and center,\n    // used for tap counting\n\n    this.pTime = false;\n    this.pCenter = false;\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n  }\n\n  inherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n      event: 'tap',\n      pointers: 1,\n      taps: 1,\n      interval: 300,\n      // max time between the multi-tap taps\n      time: 250,\n      // max time of the pointer to be down (like finger on the screen)\n      threshold: 9,\n      // a minimal movement is ok, but keep it low\n      posThreshold: 10 // a multi-tap can be a bit off the initial position\n\n    },\n    getTouchAction: function () {\n      return [TOUCH_ACTION_MANIPULATION];\n    },\n    process: function (input) {\n      var options = this.options;\n      var validPointers = input.pointers.length === options.pointers;\n      var validMovement = input.distance < options.threshold;\n      var validTouchTime = input.deltaTime < options.time;\n      this.reset();\n\n      if (input.eventType & INPUT_START && this.count === 0) {\n        return this.failTimeout();\n      } // we only allow little movement\n      // and we've reached an end event, so a tap is possible\n\n\n      if (validMovement && validTouchTime && validPointers) {\n        if (input.eventType != INPUT_END) {\n          return this.failTimeout();\n        }\n\n        var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;\n        var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n        this.pTime = input.timeStamp;\n        this.pCenter = input.center;\n\n        if (!validMultiTap || !validInterval) {\n          this.count = 1;\n        } else {\n          this.count += 1;\n        }\n\n        this._input = input; // if tap count matches we have recognized it,\n        // else it has began recognizing...\n\n        var tapCount = this.count % options.taps;\n\n        if (tapCount === 0) {\n          // no failing requirements, immediately trigger the tap event\n          // or wait as long as the multitap interval to trigger\n          if (!this.hasRequireFailures()) {\n            return STATE_RECOGNIZED;\n          } else {\n            this._timer = setTimeoutContext(function () {\n              this.state = STATE_RECOGNIZED;\n              this.tryEmit();\n            }, options.interval, this);\n            return STATE_BEGAN;\n          }\n        }\n      }\n\n      return STATE_FAILED;\n    },\n    failTimeout: function () {\n      this._timer = setTimeoutContext(function () {\n        this.state = STATE_FAILED;\n      }, this.options.interval, this);\n      return STATE_FAILED;\n    },\n    reset: function () {\n      clearTimeout(this._timer);\n    },\n    emit: function () {\n      if (this.state == STATE_RECOGNIZED) {\n        this._input.tapCount = this.count;\n        this.manager.emit(this.options.event, this._input);\n      }\n    }\n  });\n  /**\n   * Simple way to create a manager with a default set of recognizers.\n   * @param {HTMLElement} element\n   * @param {Object} [options]\n   * @constructor\n   */\n\n  function Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n  }\n  /**\n   * @const {string}\n   */\n\n\n  Hammer.VERSION = '2.0.7';\n  /**\n   * default settings\n   * @namespace\n   */\n\n  Hammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [// RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n    [RotateRecognizer, {\n      enable: false\n    }], [PinchRecognizer, {\n      enable: false\n    }, ['rotate']], [SwipeRecognizer, {\n      direction: DIRECTION_HORIZONTAL\n    }], [PanRecognizer, {\n      direction: DIRECTION_HORIZONTAL\n    }, ['swipe']], [TapRecognizer], [TapRecognizer, {\n      event: 'doubletap',\n      taps: 2\n    }, ['tap']], [PressRecognizer]],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n      /**\n       * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n       * @type {String}\n       * @default 'none'\n       */\n      userSelect: 'none',\n\n      /**\n       * Disable the Windows Phone grippers when pressing an element.\n       * @type {String}\n       * @default 'none'\n       */\n      touchSelect: 'none',\n\n      /**\n       * Disables the default callout shown when you touch and hold a touch target.\n       * On iOS, when you touch and hold a touch target such as a link, Safari displays\n       * a callout containing information about the link. This property allows you to disable that callout.\n       * @type {String}\n       * @default 'none'\n       */\n      touchCallout: 'none',\n\n      /**\n       * Specifies whether zooming is enabled. Used by IE10>\n       * @type {String}\n       * @default 'none'\n       */\n      contentZooming: 'none',\n\n      /**\n       * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n       * @type {String}\n       * @default 'none'\n       */\n      userDrag: 'none',\n\n      /**\n       * Overrides the highlight color shown when the user taps a link or a JavaScript\n       * clickable element in iOS. This property obeys the alpha value, if specified.\n       * @type {String}\n       * @default 'rgba(0,0,0,0)'\n       */\n      tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n  };\n  var STOP = 1;\n  var FORCED_STOP = 2;\n  /**\n   * Manager\n   * @param {HTMLElement} element\n   * @param {Object} [options]\n   * @constructor\n   */\n\n  function Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n    this.options.inputTarget = this.options.inputTarget || element;\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n    toggleCssProps(this, true);\n    each(this.options.recognizers, function (item) {\n      var recognizer = this.add(new item[0](item[1]));\n      item[2] && recognizer.recognizeWith(item[2]);\n      item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n  }\n\n  Manager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function (options) {\n      assign(this.options, options); // Options that need a little more setup\n\n      if (options.touchAction) {\n        this.touchAction.update();\n      }\n\n      if (options.inputTarget) {\n        // Clean up existing event listeners and reinitialize\n        this.input.destroy();\n        this.input.target = options.inputTarget;\n        this.input.init();\n      }\n\n      return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function (force) {\n      this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function (inputData) {\n      var session = this.session;\n\n      if (session.stopped) {\n        return;\n      } // run the touch-action polyfill\n\n\n      this.touchAction.preventDefaults(inputData);\n      var recognizer;\n      var recognizers = this.recognizers; // this holds the recognizer that is being recognized.\n      // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n      // if no recognizer is detecting a thing, it is set to `null`\n\n      var curRecognizer = session.curRecognizer; // reset when the last recognizer is recognized\n      // or when we're in a new session\n\n      if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {\n        curRecognizer = session.curRecognizer = null;\n      }\n\n      var i = 0;\n\n      while (i < recognizers.length) {\n        recognizer = recognizers[i]; // find out if we are allowed try to recognize the input for this one.\n        // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n        // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n        //      that is being recognized.\n        // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n        //      this can be setup with the `recognizeWith()` method on the recognizer.\n\n        if (session.stopped !== FORCED_STOP && ( // 1\n        !curRecognizer || recognizer == curRecognizer || // 2\n        recognizer.canRecognizeWith(curRecognizer))) {\n          // 3\n          recognizer.recognize(inputData);\n        } else {\n          recognizer.reset();\n        } // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n        // current active recognizer. but only if we don't already have an active recognizer\n\n\n        if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n          curRecognizer = session.curRecognizer = recognizer;\n        }\n\n        i++;\n      }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function (recognizer) {\n      if (recognizer instanceof Recognizer) {\n        return recognizer;\n      }\n\n      var recognizers = this.recognizers;\n\n      for (var i = 0; i < recognizers.length; i++) {\n        if (recognizers[i].options.event == recognizer) {\n          return recognizers[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function (recognizer) {\n      if (invokeArrayArg(recognizer, 'add', this)) {\n        return this;\n      } // remove existing\n\n\n      var existing = this.get(recognizer.options.event);\n\n      if (existing) {\n        this.remove(existing);\n      }\n\n      this.recognizers.push(recognizer);\n      recognizer.manager = this;\n      this.touchAction.update();\n      return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function (recognizer) {\n      if (invokeArrayArg(recognizer, 'remove', this)) {\n        return this;\n      }\n\n      recognizer = this.get(recognizer); // let's make sure this recognizer exists\n\n      if (recognizer) {\n        var recognizers = this.recognizers;\n        var index = inArray(recognizers, recognizer);\n\n        if (index !== -1) {\n          recognizers.splice(index, 1);\n          this.touchAction.update();\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function (events, handler) {\n      if (events === undefined) {\n        return;\n      }\n\n      if (handler === undefined) {\n        return;\n      }\n\n      var handlers = this.handlers;\n      each(splitStr(events), function (event) {\n        handlers[event] = handlers[event] || [];\n        handlers[event].push(handler);\n      });\n      return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function (events, handler) {\n      if (events === undefined) {\n        return;\n      }\n\n      var handlers = this.handlers;\n      each(splitStr(events), function (event) {\n        if (!handler) {\n          delete handlers[event];\n        } else {\n          handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n        }\n      });\n      return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function (event, data) {\n      // we also want to trigger dom events\n      if (this.options.domEvents) {\n        triggerDomEvent(event, data);\n      } // no handlers, so skip it all\n\n\n      var handlers = this.handlers[event] && this.handlers[event].slice();\n\n      if (!handlers || !handlers.length) {\n        return;\n      }\n\n      data.type = event;\n\n      data.preventDefault = function () {\n        data.srcEvent.preventDefault();\n      };\n\n      var i = 0;\n\n      while (i < handlers.length) {\n        handlers[i](data);\n        i++;\n      }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function () {\n      this.element && toggleCssProps(this, false);\n      this.handlers = {};\n      this.session = {};\n      this.input.destroy();\n      this.element = null;\n    }\n  };\n  /**\n   * add/remove the css properties as defined in manager.options.cssProps\n   * @param {Manager} manager\n   * @param {Boolean} add\n   */\n\n  function toggleCssProps(manager, add) {\n    var element = manager.element;\n\n    if (!element.style) {\n      return;\n    }\n\n    var prop;\n    each(manager.options.cssProps, function (value, name) {\n      prop = prefixed(element.style, name);\n\n      if (add) {\n        manager.oldCssProps[prop] = element.style[prop];\n        element.style[prop] = value;\n      } else {\n        element.style[prop] = manager.oldCssProps[prop] || '';\n      }\n    });\n\n    if (!add) {\n      manager.oldCssProps = {};\n    }\n  }\n  /**\n   * trigger dom event\n   * @param {String} event\n   * @param {Object} data\n   */\n\n\n  function triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n  }\n\n  assign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n  }); // this prevents errors when Hammer is loaded in the presence of an AMD\n  //  style loader but by script tag, not by the loader.\n\n  var freeGlobal = typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}; // jshint ignore:line\n\n  freeGlobal.Hammer = Hammer;\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return Hammer;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, document, 'Hammer');\n\n//# sourceURL=webpack:///./node_modules/hammerjs/hammer.js?");

/***/ }),

/***/ "./node_modules/iscroll/build/iscroll.js":
/*!***********************************************!*\
  !*** ./node_modules/iscroll/build/iscroll.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*! iScroll v5.2.0 ~ (c) 2008-2016 Matteo Spinelli ~ http://cubiq.org/license */\n(function (window, document, Math) {\n  var rAF = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n    window.setTimeout(callback, 1000 / 60);\n  };\n\n  var utils = function () {\n    var me = {};\n    var _elementStyle = document.createElement('div').style;\n\n    var _vendor = function () {\n      var vendors = ['t', 'webkitT', 'MozT', 'msT', 'OT'],\n          transform,\n          i = 0,\n          l = vendors.length;\n\n      for (; i < l; i++) {\n        transform = vendors[i] + 'ransform';\n        if (transform in _elementStyle) return vendors[i].substr(0, vendors[i].length - 1);\n      }\n\n      return false;\n    }();\n\n    function _prefixStyle(style) {\n      if (_vendor === false) return false;\n      if (_vendor === '') return style;\n      return _vendor + style.charAt(0).toUpperCase() + style.substr(1);\n    }\n\n    me.getTime = Date.now || function getTime() {\n      return new Date().getTime();\n    };\n\n    me.extend = function (target, obj) {\n      for (var i in obj) {\n        target[i] = obj[i];\n      }\n    };\n\n    me.addEvent = function (el, type, fn, capture) {\n      el.addEventListener(type, fn, !!capture);\n    };\n\n    me.removeEvent = function (el, type, fn, capture) {\n      el.removeEventListener(type, fn, !!capture);\n    };\n\n    me.prefixPointerEvent = function (pointerEvent) {\n      return window.MSPointerEvent ? 'MSPointer' + pointerEvent.charAt(7).toUpperCase() + pointerEvent.substr(8) : pointerEvent;\n    };\n\n    me.momentum = function (current, start, time, lowerMargin, wrapperSize, deceleration) {\n      var distance = current - start,\n          speed = Math.abs(distance) / time,\n          destination,\n          duration;\n      deceleration = deceleration === undefined ? 0.0006 : deceleration;\n      destination = current + speed * speed / (2 * deceleration) * (distance < 0 ? -1 : 1);\n      duration = speed / deceleration;\n\n      if (destination < lowerMargin) {\n        destination = wrapperSize ? lowerMargin - wrapperSize / 2.5 * (speed / 8) : lowerMargin;\n        distance = Math.abs(destination - current);\n        duration = distance / speed;\n      } else if (destination > 0) {\n        destination = wrapperSize ? wrapperSize / 2.5 * (speed / 8) : 0;\n        distance = Math.abs(current) + destination;\n        duration = distance / speed;\n      }\n\n      return {\n        destination: Math.round(destination),\n        duration: duration\n      };\n    };\n\n    var _transform = _prefixStyle('transform');\n\n    me.extend(me, {\n      hasTransform: _transform !== false,\n      hasPerspective: _prefixStyle('perspective') in _elementStyle,\n      hasTouch: 'ontouchstart' in window,\n      hasPointer: !!(window.PointerEvent || window.MSPointerEvent),\n      // IE10 is prefixed\n      hasTransition: _prefixStyle('transition') in _elementStyle\n    });\n    /*\n    This should find all Android browsers lower than build 535.19 (both stock browser and webview)\n    - galaxy S2 is ok\n       - 2.3.6 : `AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1`\n       - 4.0.4 : `AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30`\n      - galaxy S3 is badAndroid (stock brower, webview)\n        `AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30`\n      - galaxy S4 is badAndroid (stock brower, webview)\n        `AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30`\n      - galaxy S5 is OK\n        `AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Mobile Safari/537.36 (Chrome/)`\n      - galaxy S6 is OK\n        `AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Mobile Safari/537.36 (Chrome/)`\n     */\n\n    me.isBadAndroid = function () {\n      var appVersion = window.navigator.appVersion; // Android browser is not a chrome browser.\n\n      if (/Android/.test(appVersion) && !/Chrome\\/\\d/.test(appVersion)) {\n        var safariVersion = appVersion.match(/Safari\\/(\\d+.\\d)/);\n\n        if (safariVersion && typeof safariVersion === \"object\" && safariVersion.length >= 2) {\n          return parseFloat(safariVersion[1]) < 535.19;\n        } else {\n          return true;\n        }\n      } else {\n        return false;\n      }\n    }();\n\n    me.extend(me.style = {}, {\n      transform: _transform,\n      transitionTimingFunction: _prefixStyle('transitionTimingFunction'),\n      transitionDuration: _prefixStyle('transitionDuration'),\n      transitionDelay: _prefixStyle('transitionDelay'),\n      transformOrigin: _prefixStyle('transformOrigin')\n    });\n\n    me.hasClass = function (e, c) {\n      var re = new RegExp(\"(^|\\\\s)\" + c + \"(\\\\s|$)\");\n      return re.test(e.className);\n    };\n\n    me.addClass = function (e, c) {\n      if (me.hasClass(e, c)) {\n        return;\n      }\n\n      var newclass = e.className.split(' ');\n      newclass.push(c);\n      e.className = newclass.join(' ');\n    };\n\n    me.removeClass = function (e, c) {\n      if (!me.hasClass(e, c)) {\n        return;\n      }\n\n      var re = new RegExp(\"(^|\\\\s)\" + c + \"(\\\\s|$)\", 'g');\n      e.className = e.className.replace(re, ' ');\n    };\n\n    me.offset = function (el) {\n      var left = -el.offsetLeft,\n          top = -el.offsetTop; // jshint -W084\n\n      while (el = el.offsetParent) {\n        left -= el.offsetLeft;\n        top -= el.offsetTop;\n      } // jshint +W084\n\n\n      return {\n        left: left,\n        top: top\n      };\n    };\n\n    me.preventDefaultException = function (el, exceptions) {\n      for (var i in exceptions) {\n        if (exceptions[i].test(el[i])) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    me.extend(me.eventType = {}, {\n      touchstart: 1,\n      touchmove: 1,\n      touchend: 1,\n      mousedown: 2,\n      mousemove: 2,\n      mouseup: 2,\n      pointerdown: 3,\n      pointermove: 3,\n      pointerup: 3,\n      MSPointerDown: 3,\n      MSPointerMove: 3,\n      MSPointerUp: 3\n    });\n    me.extend(me.ease = {}, {\n      quadratic: {\n        style: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',\n        fn: function (k) {\n          return k * (2 - k);\n        }\n      },\n      circular: {\n        style: 'cubic-bezier(0.1, 0.57, 0.1, 1)',\n        // Not properly \"circular\" but this looks better, it should be (0.075, 0.82, 0.165, 1)\n        fn: function (k) {\n          return Math.sqrt(1 - --k * k);\n        }\n      },\n      back: {\n        style: 'cubic-bezier(0.175, 0.885, 0.32, 1.275)',\n        fn: function (k) {\n          var b = 4;\n          return (k = k - 1) * k * ((b + 1) * k + b) + 1;\n        }\n      },\n      bounce: {\n        style: '',\n        fn: function (k) {\n          if ((k /= 1) < 1 / 2.75) {\n            return 7.5625 * k * k;\n          } else if (k < 2 / 2.75) {\n            return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;\n          } else if (k < 2.5 / 2.75) {\n            return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;\n          } else {\n            return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;\n          }\n        }\n      },\n      elastic: {\n        style: '',\n        fn: function (k) {\n          var f = 0.22,\n              e = 0.4;\n\n          if (k === 0) {\n            return 0;\n          }\n\n          if (k == 1) {\n            return 1;\n          }\n\n          return e * Math.pow(2, -10 * k) * Math.sin((k - f / 4) * (2 * Math.PI) / f) + 1;\n        }\n      }\n    });\n\n    me.tap = function (e, eventName) {\n      var ev = document.createEvent('Event');\n      ev.initEvent(eventName, true, true);\n      ev.pageX = e.pageX;\n      ev.pageY = e.pageY;\n      e.target.dispatchEvent(ev);\n    };\n\n    me.click = function (e) {\n      var target = e.target,\n          ev;\n\n      if (!/(SELECT|INPUT|TEXTAREA)/i.test(target.tagName)) {\n        ev = document.createEvent('MouseEvents');\n        ev.initMouseEvent('click', true, true, e.view, 1, target.screenX, target.screenY, target.clientX, target.clientY, e.ctrlKey, e.altKey, e.shiftKey, e.metaKey, 0, null);\n        ev._constructed = true;\n        target.dispatchEvent(ev);\n      }\n    };\n\n    return me;\n  }();\n\n  function IScroll(el, options) {\n    this.wrapper = typeof el == 'string' ? document.querySelector(el) : el;\n    this.scroller = this.wrapper.children[0];\n    this.scrollerStyle = this.scroller.style; // cache style for better performance\n\n    this.options = {\n      resizeScrollbars: true,\n      mouseWheelSpeed: 20,\n      snapThreshold: 0.334,\n      // INSERT POINT: OPTIONS\n      disablePointer: !utils.hasPointer,\n      disableTouch: utils.hasPointer || !utils.hasTouch,\n      disableMouse: utils.hasPointer || utils.hasTouch,\n      startX: 0,\n      startY: 0,\n      scrollY: true,\n      directionLockThreshold: 5,\n      momentum: true,\n      bounce: true,\n      bounceTime: 600,\n      bounceEasing: '',\n      preventDefault: true,\n      preventDefaultException: {\n        tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT)$/\n      },\n      HWCompositing: true,\n      useTransition: true,\n      useTransform: true,\n      bindToWrapper: typeof window.onmousedown === \"undefined\"\n    };\n\n    for (var i in options) {\n      this.options[i] = options[i];\n    } // Normalize options\n\n\n    this.translateZ = this.options.HWCompositing && utils.hasPerspective ? ' translateZ(0)' : '';\n    this.options.useTransition = utils.hasTransition && this.options.useTransition;\n    this.options.useTransform = utils.hasTransform && this.options.useTransform;\n    this.options.eventPassthrough = this.options.eventPassthrough === true ? 'vertical' : this.options.eventPassthrough;\n    this.options.preventDefault = !this.options.eventPassthrough && this.options.preventDefault; // If you want eventPassthrough I have to lock one of the axes\n\n    this.options.scrollY = this.options.eventPassthrough == 'vertical' ? false : this.options.scrollY;\n    this.options.scrollX = this.options.eventPassthrough == 'horizontal' ? false : this.options.scrollX; // With eventPassthrough we also need lockDirection mechanism\n\n    this.options.freeScroll = this.options.freeScroll && !this.options.eventPassthrough;\n    this.options.directionLockThreshold = this.options.eventPassthrough ? 0 : this.options.directionLockThreshold;\n    this.options.bounceEasing = typeof this.options.bounceEasing == 'string' ? utils.ease[this.options.bounceEasing] || utils.ease.circular : this.options.bounceEasing;\n    this.options.resizePolling = this.options.resizePolling === undefined ? 60 : this.options.resizePolling;\n\n    if (this.options.tap === true) {\n      this.options.tap = 'tap';\n    }\n\n    if (this.options.shrinkScrollbars == 'scale') {\n      this.options.useTransition = false;\n    }\n\n    this.options.invertWheelDirection = this.options.invertWheelDirection ? -1 : 1; // INSERT POINT: NORMALIZATION\n    // Some defaults\n\n    this.x = 0;\n    this.y = 0;\n    this.directionX = 0;\n    this.directionY = 0;\n    this._events = {}; // INSERT POINT: DEFAULTS\n\n    this._init();\n\n    this.refresh();\n    this.scrollTo(this.options.startX, this.options.startY);\n    this.enable();\n  }\n\n  IScroll.prototype = {\n    version: '5.2.0',\n    _init: function () {\n      this._initEvents();\n\n      if (this.options.scrollbars || this.options.indicators) {\n        this._initIndicators();\n      }\n\n      if (this.options.mouseWheel) {\n        this._initWheel();\n      }\n\n      if (this.options.snap) {\n        this._initSnap();\n      }\n\n      if (this.options.keyBindings) {\n        this._initKeys();\n      } // INSERT POINT: _init\n\n    },\n    destroy: function () {\n      this._initEvents(true);\n\n      clearTimeout(this.resizeTimeout);\n      this.resizeTimeout = null;\n\n      this._execEvent('destroy');\n    },\n    _transitionEnd: function (e) {\n      if (e.target != this.scroller || !this.isInTransition) {\n        return;\n      }\n\n      this._transitionTime();\n\n      if (!this.resetPosition(this.options.bounceTime)) {\n        this.isInTransition = false;\n\n        this._execEvent('scrollEnd');\n      }\n    },\n    _start: function (e) {\n      // React to left mouse button only\n      if (utils.eventType[e.type] != 1) {\n        // for button property\n        // http://unixpapa.com/js/mouse.html\n        var button;\n\n        if (!e.which) {\n          /* IE case */\n          button = e.button < 2 ? 0 : e.button == 4 ? 1 : 2;\n        } else {\n          /* All others */\n          button = e.button;\n        }\n\n        if (button !== 0) {\n          return;\n        }\n      }\n\n      if (!this.enabled || this.initiated && utils.eventType[e.type] !== this.initiated) {\n        return;\n      }\n\n      if (this.options.preventDefault && !utils.isBadAndroid && !utils.preventDefaultException(e.target, this.options.preventDefaultException)) {\n        e.preventDefault();\n      }\n\n      var point = e.touches ? e.touches[0] : e,\n          pos;\n      this.initiated = utils.eventType[e.type];\n      this.moved = false;\n      this.distX = 0;\n      this.distY = 0;\n      this.directionX = 0;\n      this.directionY = 0;\n      this.directionLocked = 0;\n      this.startTime = utils.getTime();\n\n      if (this.options.useTransition && this.isInTransition) {\n        this._transitionTime();\n\n        this.isInTransition = false;\n        pos = this.getComputedPosition();\n\n        this._translate(Math.round(pos.x), Math.round(pos.y));\n\n        this._execEvent('scrollEnd');\n      } else if (!this.options.useTransition && this.isAnimating) {\n        this.isAnimating = false;\n\n        this._execEvent('scrollEnd');\n      }\n\n      this.startX = this.x;\n      this.startY = this.y;\n      this.absStartX = this.x;\n      this.absStartY = this.y;\n      this.pointX = point.pageX;\n      this.pointY = point.pageY;\n\n      this._execEvent('beforeScrollStart');\n    },\n    _move: function (e) {\n      if (!this.enabled || utils.eventType[e.type] !== this.initiated) {\n        return;\n      }\n\n      if (this.options.preventDefault) {\n        // increases performance on Android? TODO: check!\n        e.preventDefault();\n      }\n\n      var point = e.touches ? e.touches[0] : e,\n          deltaX = point.pageX - this.pointX,\n          deltaY = point.pageY - this.pointY,\n          timestamp = utils.getTime(),\n          newX,\n          newY,\n          absDistX,\n          absDistY;\n      this.pointX = point.pageX;\n      this.pointY = point.pageY;\n      this.distX += deltaX;\n      this.distY += deltaY;\n      absDistX = Math.abs(this.distX);\n      absDistY = Math.abs(this.distY); // We need to move at least 10 pixels for the scrolling to initiate\n\n      if (timestamp - this.endTime > 300 && absDistX < 10 && absDistY < 10) {\n        return;\n      } // If you are scrolling in one direction lock the other\n\n\n      if (!this.directionLocked && !this.options.freeScroll) {\n        if (absDistX > absDistY + this.options.directionLockThreshold) {\n          this.directionLocked = 'h'; // lock horizontally\n        } else if (absDistY >= absDistX + this.options.directionLockThreshold) {\n          this.directionLocked = 'v'; // lock vertically\n        } else {\n          this.directionLocked = 'n'; // no lock\n        }\n      }\n\n      if (this.directionLocked == 'h') {\n        if (this.options.eventPassthrough == 'vertical') {\n          e.preventDefault();\n        } else if (this.options.eventPassthrough == 'horizontal') {\n          this.initiated = false;\n          return;\n        }\n\n        deltaY = 0;\n      } else if (this.directionLocked == 'v') {\n        if (this.options.eventPassthrough == 'horizontal') {\n          e.preventDefault();\n        } else if (this.options.eventPassthrough == 'vertical') {\n          this.initiated = false;\n          return;\n        }\n\n        deltaX = 0;\n      }\n\n      deltaX = this.hasHorizontalScroll ? deltaX : 0;\n      deltaY = this.hasVerticalScroll ? deltaY : 0;\n      newX = this.x + deltaX;\n      newY = this.y + deltaY; // Slow down if outside of the boundaries\n\n      if (newX > 0 || newX < this.maxScrollX) {\n        newX = this.options.bounce ? this.x + deltaX / 3 : newX > 0 ? 0 : this.maxScrollX;\n      }\n\n      if (newY > 0 || newY < this.maxScrollY) {\n        newY = this.options.bounce ? this.y + deltaY / 3 : newY > 0 ? 0 : this.maxScrollY;\n      }\n\n      this.directionX = deltaX > 0 ? -1 : deltaX < 0 ? 1 : 0;\n      this.directionY = deltaY > 0 ? -1 : deltaY < 0 ? 1 : 0;\n\n      if (!this.moved) {\n        this._execEvent('scrollStart');\n      }\n\n      this.moved = true;\n\n      this._translate(newX, newY);\n      /* REPLACE START: _move */\n\n\n      if (timestamp - this.startTime > 300) {\n        this.startTime = timestamp;\n        this.startX = this.x;\n        this.startY = this.y;\n      }\n      /* REPLACE END: _move */\n\n    },\n    _end: function (e) {\n      if (!this.enabled || utils.eventType[e.type] !== this.initiated) {\n        return;\n      }\n\n      if (this.options.preventDefault && !utils.preventDefaultException(e.target, this.options.preventDefaultException)) {\n        e.preventDefault();\n      }\n\n      var point = e.changedTouches ? e.changedTouches[0] : e,\n          momentumX,\n          momentumY,\n          duration = utils.getTime() - this.startTime,\n          newX = Math.round(this.x),\n          newY = Math.round(this.y),\n          distanceX = Math.abs(newX - this.startX),\n          distanceY = Math.abs(newY - this.startY),\n          time = 0,\n          easing = '';\n      this.isInTransition = 0;\n      this.initiated = 0;\n      this.endTime = utils.getTime(); // reset if we are outside of the boundaries\n\n      if (this.resetPosition(this.options.bounceTime)) {\n        return;\n      }\n\n      this.scrollTo(newX, newY); // ensures that the last position is rounded\n      // we scrolled less than 10 pixels\n\n      if (!this.moved) {\n        if (this.options.tap) {\n          utils.tap(e, this.options.tap);\n        }\n\n        if (this.options.click) {\n          utils.click(e);\n        }\n\n        this._execEvent('scrollCancel');\n\n        return;\n      }\n\n      if (this._events.flick && duration < 200 && distanceX < 100 && distanceY < 100) {\n        this._execEvent('flick');\n\n        return;\n      } // start momentum animation if needed\n\n\n      if (this.options.momentum && duration < 300) {\n        momentumX = this.hasHorizontalScroll ? utils.momentum(this.x, this.startX, duration, this.maxScrollX, this.options.bounce ? this.wrapperWidth : 0, this.options.deceleration) : {\n          destination: newX,\n          duration: 0\n        };\n        momentumY = this.hasVerticalScroll ? utils.momentum(this.y, this.startY, duration, this.maxScrollY, this.options.bounce ? this.wrapperHeight : 0, this.options.deceleration) : {\n          destination: newY,\n          duration: 0\n        };\n        newX = momentumX.destination;\n        newY = momentumY.destination;\n        time = Math.max(momentumX.duration, momentumY.duration);\n        this.isInTransition = 1;\n      }\n\n      if (this.options.snap) {\n        var snap = this._nearestSnap(newX, newY);\n\n        this.currentPage = snap;\n        time = this.options.snapSpeed || Math.max(Math.max(Math.min(Math.abs(newX - snap.x), 1000), Math.min(Math.abs(newY - snap.y), 1000)), 300);\n        newX = snap.x;\n        newY = snap.y;\n        this.directionX = 0;\n        this.directionY = 0;\n        easing = this.options.bounceEasing;\n      } // INSERT POINT: _end\n\n\n      if (newX != this.x || newY != this.y) {\n        // change easing function when scroller goes out of the boundaries\n        if (newX > 0 || newX < this.maxScrollX || newY > 0 || newY < this.maxScrollY) {\n          easing = utils.ease.quadratic;\n        }\n\n        this.scrollTo(newX, newY, time, easing);\n        return;\n      }\n\n      this._execEvent('scrollEnd');\n    },\n    _resize: function () {\n      var that = this;\n      clearTimeout(this.resizeTimeout);\n      this.resizeTimeout = setTimeout(function () {\n        that.refresh();\n      }, this.options.resizePolling);\n    },\n    resetPosition: function (time) {\n      var x = this.x,\n          y = this.y;\n      time = time || 0;\n\n      if (!this.hasHorizontalScroll || this.x > 0) {\n        x = 0;\n      } else if (this.x < this.maxScrollX) {\n        x = this.maxScrollX;\n      }\n\n      if (!this.hasVerticalScroll || this.y > 0) {\n        y = 0;\n      } else if (this.y < this.maxScrollY) {\n        y = this.maxScrollY;\n      }\n\n      if (x == this.x && y == this.y) {\n        return false;\n      }\n\n      this.scrollTo(x, y, time, this.options.bounceEasing);\n      return true;\n    },\n    disable: function () {\n      this.enabled = false;\n    },\n    enable: function () {\n      this.enabled = true;\n    },\n    refresh: function () {\n      var rf = this.wrapper.offsetHeight; // Force reflow\n\n      this.wrapperWidth = this.wrapper.clientWidth;\n      this.wrapperHeight = this.wrapper.clientHeight;\n      /* REPLACE START: refresh */\n\n      this.scrollerWidth = this.scroller.offsetWidth;\n      this.scrollerHeight = this.scroller.offsetHeight;\n      this.maxScrollX = this.wrapperWidth - this.scrollerWidth;\n      this.maxScrollY = this.wrapperHeight - this.scrollerHeight;\n      /* REPLACE END: refresh */\n\n      this.hasHorizontalScroll = this.options.scrollX && this.maxScrollX < 0;\n      this.hasVerticalScroll = this.options.scrollY && this.maxScrollY < 0;\n\n      if (!this.hasHorizontalScroll) {\n        this.maxScrollX = 0;\n        this.scrollerWidth = this.wrapperWidth;\n      }\n\n      if (!this.hasVerticalScroll) {\n        this.maxScrollY = 0;\n        this.scrollerHeight = this.wrapperHeight;\n      }\n\n      this.endTime = 0;\n      this.directionX = 0;\n      this.directionY = 0;\n      this.wrapperOffset = utils.offset(this.wrapper);\n\n      this._execEvent('refresh');\n\n      this.resetPosition(); // INSERT POINT: _refresh\n    },\n    on: function (type, fn) {\n      if (!this._events[type]) {\n        this._events[type] = [];\n      }\n\n      this._events[type].push(fn);\n    },\n    off: function (type, fn) {\n      if (!this._events[type]) {\n        return;\n      }\n\n      var index = this._events[type].indexOf(fn);\n\n      if (index > -1) {\n        this._events[type].splice(index, 1);\n      }\n    },\n    _execEvent: function (type) {\n      if (!this._events[type]) {\n        return;\n      }\n\n      var i = 0,\n          l = this._events[type].length;\n\n      if (!l) {\n        return;\n      }\n\n      for (; i < l; i++) {\n        this._events[type][i].apply(this, [].slice.call(arguments, 1));\n      }\n    },\n    scrollBy: function (x, y, time, easing) {\n      x = this.x + x;\n      y = this.y + y;\n      time = time || 0;\n      this.scrollTo(x, y, time, easing);\n    },\n    scrollTo: function (x, y, time, easing) {\n      easing = easing || utils.ease.circular;\n      this.isInTransition = this.options.useTransition && time > 0;\n      var transitionType = this.options.useTransition && easing.style;\n\n      if (!time || transitionType) {\n        if (transitionType) {\n          this._transitionTimingFunction(easing.style);\n\n          this._transitionTime(time);\n        }\n\n        this._translate(x, y);\n      } else {\n        this._animate(x, y, time, easing.fn);\n      }\n    },\n    scrollToElement: function (el, time, offsetX, offsetY, easing) {\n      el = el.nodeType ? el : this.scroller.querySelector(el);\n\n      if (!el) {\n        return;\n      }\n\n      var pos = utils.offset(el);\n      pos.left -= this.wrapperOffset.left;\n      pos.top -= this.wrapperOffset.top; // if offsetX/Y are true we center the element to the screen\n\n      if (offsetX === true) {\n        offsetX = Math.round(el.offsetWidth / 2 - this.wrapper.offsetWidth / 2);\n      }\n\n      if (offsetY === true) {\n        offsetY = Math.round(el.offsetHeight / 2 - this.wrapper.offsetHeight / 2);\n      }\n\n      pos.left -= offsetX || 0;\n      pos.top -= offsetY || 0;\n      pos.left = pos.left > 0 ? 0 : pos.left < this.maxScrollX ? this.maxScrollX : pos.left;\n      pos.top = pos.top > 0 ? 0 : pos.top < this.maxScrollY ? this.maxScrollY : pos.top;\n      time = time === undefined || time === null || time === 'auto' ? Math.max(Math.abs(this.x - pos.left), Math.abs(this.y - pos.top)) : time;\n      this.scrollTo(pos.left, pos.top, time, easing);\n    },\n    _transitionTime: function (time) {\n      time = time || 0;\n      var durationProp = utils.style.transitionDuration;\n      this.scrollerStyle[durationProp] = time + 'ms';\n\n      if (!time && utils.isBadAndroid) {\n        this.scrollerStyle[durationProp] = '0.0001ms'; // remove 0.0001ms\n\n        var self = this;\n        rAF(function () {\n          if (self.scrollerStyle[durationProp] === '0.0001ms') {\n            self.scrollerStyle[durationProp] = '0s';\n          }\n        });\n      }\n\n      if (this.indicators) {\n        for (var i = this.indicators.length; i--;) {\n          this.indicators[i].transitionTime(time);\n        }\n      } // INSERT POINT: _transitionTime\n\n    },\n    _transitionTimingFunction: function (easing) {\n      this.scrollerStyle[utils.style.transitionTimingFunction] = easing;\n\n      if (this.indicators) {\n        for (var i = this.indicators.length; i--;) {\n          this.indicators[i].transitionTimingFunction(easing);\n        }\n      } // INSERT POINT: _transitionTimingFunction\n\n    },\n    _translate: function (x, y) {\n      if (this.options.useTransform) {\n        /* REPLACE START: _translate */\n        this.scrollerStyle[utils.style.transform] = 'translate(' + x + 'px,' + y + 'px)' + this.translateZ;\n        /* REPLACE END: _translate */\n      } else {\n        x = Math.round(x);\n        y = Math.round(y);\n        this.scrollerStyle.left = x + 'px';\n        this.scrollerStyle.top = y + 'px';\n      }\n\n      this.x = x;\n      this.y = y;\n\n      if (this.indicators) {\n        for (var i = this.indicators.length; i--;) {\n          this.indicators[i].updatePosition();\n        }\n      } // INSERT POINT: _translate\n\n    },\n    _initEvents: function (remove) {\n      var eventType = remove ? utils.removeEvent : utils.addEvent,\n          target = this.options.bindToWrapper ? this.wrapper : window;\n      eventType(window, 'orientationchange', this);\n      eventType(window, 'resize', this);\n\n      if (this.options.click) {\n        eventType(this.wrapper, 'click', this, true);\n      }\n\n      if (!this.options.disableMouse) {\n        eventType(this.wrapper, 'mousedown', this);\n        eventType(target, 'mousemove', this);\n        eventType(target, 'mousecancel', this);\n        eventType(target, 'mouseup', this);\n      }\n\n      if (utils.hasPointer && !this.options.disablePointer) {\n        eventType(this.wrapper, utils.prefixPointerEvent('pointerdown'), this);\n        eventType(target, utils.prefixPointerEvent('pointermove'), this);\n        eventType(target, utils.prefixPointerEvent('pointercancel'), this);\n        eventType(target, utils.prefixPointerEvent('pointerup'), this);\n      }\n\n      if (utils.hasTouch && !this.options.disableTouch) {\n        eventType(this.wrapper, 'touchstart', this);\n        eventType(target, 'touchmove', this);\n        eventType(target, 'touchcancel', this);\n        eventType(target, 'touchend', this);\n      }\n\n      eventType(this.scroller, 'transitionend', this);\n      eventType(this.scroller, 'webkitTransitionEnd', this);\n      eventType(this.scroller, 'oTransitionEnd', this);\n      eventType(this.scroller, 'MSTransitionEnd', this);\n    },\n    getComputedPosition: function () {\n      var matrix = window.getComputedStyle(this.scroller, null),\n          x,\n          y;\n\n      if (this.options.useTransform) {\n        matrix = matrix[utils.style.transform].split(')')[0].split(', ');\n        x = +(matrix[12] || matrix[4]);\n        y = +(matrix[13] || matrix[5]);\n      } else {\n        x = +matrix.left.replace(/[^-\\d.]/g, '');\n        y = +matrix.top.replace(/[^-\\d.]/g, '');\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    },\n    _initIndicators: function () {\n      var interactive = this.options.interactiveScrollbars,\n          customStyle = typeof this.options.scrollbars != 'string',\n          indicators = [],\n          indicator;\n      var that = this;\n      this.indicators = [];\n\n      if (this.options.scrollbars) {\n        // Vertical scrollbar\n        if (this.options.scrollY) {\n          indicator = {\n            el: createDefaultScrollbar('v', interactive, this.options.scrollbars),\n            interactive: interactive,\n            defaultScrollbars: true,\n            customStyle: customStyle,\n            resize: this.options.resizeScrollbars,\n            shrink: this.options.shrinkScrollbars,\n            fade: this.options.fadeScrollbars,\n            listenX: false\n          };\n          this.wrapper.appendChild(indicator.el);\n          indicators.push(indicator);\n        } // Horizontal scrollbar\n\n\n        if (this.options.scrollX) {\n          indicator = {\n            el: createDefaultScrollbar('h', interactive, this.options.scrollbars),\n            interactive: interactive,\n            defaultScrollbars: true,\n            customStyle: customStyle,\n            resize: this.options.resizeScrollbars,\n            shrink: this.options.shrinkScrollbars,\n            fade: this.options.fadeScrollbars,\n            listenY: false\n          };\n          this.wrapper.appendChild(indicator.el);\n          indicators.push(indicator);\n        }\n      }\n\n      if (this.options.indicators) {\n        // TODO: check concat compatibility\n        indicators = indicators.concat(this.options.indicators);\n      }\n\n      for (var i = indicators.length; i--;) {\n        this.indicators.push(new Indicator(this, indicators[i]));\n      } // TODO: check if we can use array.map (wide compatibility and performance issues)\n\n\n      function _indicatorsMap(fn) {\n        if (that.indicators) {\n          for (var i = that.indicators.length; i--;) {\n            fn.call(that.indicators[i]);\n          }\n        }\n      }\n\n      if (this.options.fadeScrollbars) {\n        this.on('scrollEnd', function () {\n          _indicatorsMap(function () {\n            this.fade();\n          });\n        });\n        this.on('scrollCancel', function () {\n          _indicatorsMap(function () {\n            this.fade();\n          });\n        });\n        this.on('scrollStart', function () {\n          _indicatorsMap(function () {\n            this.fade(1);\n          });\n        });\n        this.on('beforeScrollStart', function () {\n          _indicatorsMap(function () {\n            this.fade(1, true);\n          });\n        });\n      }\n\n      this.on('refresh', function () {\n        _indicatorsMap(function () {\n          this.refresh();\n        });\n      });\n      this.on('destroy', function () {\n        _indicatorsMap(function () {\n          this.destroy();\n        });\n\n        delete this.indicators;\n      });\n    },\n    _initWheel: function () {\n      utils.addEvent(this.wrapper, 'wheel', this);\n      utils.addEvent(this.wrapper, 'mousewheel', this);\n      utils.addEvent(this.wrapper, 'DOMMouseScroll', this);\n      this.on('destroy', function () {\n        clearTimeout(this.wheelTimeout);\n        this.wheelTimeout = null;\n        utils.removeEvent(this.wrapper, 'wheel', this);\n        utils.removeEvent(this.wrapper, 'mousewheel', this);\n        utils.removeEvent(this.wrapper, 'DOMMouseScroll', this);\n      });\n    },\n    _wheel: function (e) {\n      if (!this.enabled) {\n        return;\n      }\n\n      e.preventDefault();\n      var wheelDeltaX,\n          wheelDeltaY,\n          newX,\n          newY,\n          that = this;\n\n      if (this.wheelTimeout === undefined) {\n        that._execEvent('scrollStart');\n      } // Execute the scrollEnd event after 400ms the wheel stopped scrolling\n\n\n      clearTimeout(this.wheelTimeout);\n      this.wheelTimeout = setTimeout(function () {\n        if (!that.options.snap) {\n          that._execEvent('scrollEnd');\n        }\n\n        that.wheelTimeout = undefined;\n      }, 400);\n\n      if ('deltaX' in e) {\n        if (e.deltaMode === 1) {\n          wheelDeltaX = -e.deltaX * this.options.mouseWheelSpeed;\n          wheelDeltaY = -e.deltaY * this.options.mouseWheelSpeed;\n        } else {\n          wheelDeltaX = -e.deltaX;\n          wheelDeltaY = -e.deltaY;\n        }\n      } else if ('wheelDeltaX' in e) {\n        wheelDeltaX = e.wheelDeltaX / 120 * this.options.mouseWheelSpeed;\n        wheelDeltaY = e.wheelDeltaY / 120 * this.options.mouseWheelSpeed;\n      } else if ('wheelDelta' in e) {\n        wheelDeltaX = wheelDeltaY = e.wheelDelta / 120 * this.options.mouseWheelSpeed;\n      } else if ('detail' in e) {\n        wheelDeltaX = wheelDeltaY = -e.detail / 3 * this.options.mouseWheelSpeed;\n      } else {\n        return;\n      }\n\n      wheelDeltaX *= this.options.invertWheelDirection;\n      wheelDeltaY *= this.options.invertWheelDirection;\n\n      if (!this.hasVerticalScroll) {\n        wheelDeltaX = wheelDeltaY;\n        wheelDeltaY = 0;\n      }\n\n      if (this.options.snap) {\n        newX = this.currentPage.pageX;\n        newY = this.currentPage.pageY;\n\n        if (wheelDeltaX > 0) {\n          newX--;\n        } else if (wheelDeltaX < 0) {\n          newX++;\n        }\n\n        if (wheelDeltaY > 0) {\n          newY--;\n        } else if (wheelDeltaY < 0) {\n          newY++;\n        }\n\n        this.goToPage(newX, newY);\n        return;\n      }\n\n      newX = this.x + Math.round(this.hasHorizontalScroll ? wheelDeltaX : 0);\n      newY = this.y + Math.round(this.hasVerticalScroll ? wheelDeltaY : 0);\n      this.directionX = wheelDeltaX > 0 ? -1 : wheelDeltaX < 0 ? 1 : 0;\n      this.directionY = wheelDeltaY > 0 ? -1 : wheelDeltaY < 0 ? 1 : 0;\n\n      if (newX > 0) {\n        newX = 0;\n      } else if (newX < this.maxScrollX) {\n        newX = this.maxScrollX;\n      }\n\n      if (newY > 0) {\n        newY = 0;\n      } else if (newY < this.maxScrollY) {\n        newY = this.maxScrollY;\n      }\n\n      this.scrollTo(newX, newY, 0); // INSERT POINT: _wheel\n    },\n    _initSnap: function () {\n      this.currentPage = {};\n\n      if (typeof this.options.snap == 'string') {\n        this.options.snap = this.scroller.querySelectorAll(this.options.snap);\n      }\n\n      this.on('refresh', function () {\n        var i = 0,\n            l,\n            m = 0,\n            n,\n            cx,\n            cy,\n            x = 0,\n            y,\n            stepX = this.options.snapStepX || this.wrapperWidth,\n            stepY = this.options.snapStepY || this.wrapperHeight,\n            el;\n        this.pages = [];\n\n        if (!this.wrapperWidth || !this.wrapperHeight || !this.scrollerWidth || !this.scrollerHeight) {\n          return;\n        }\n\n        if (this.options.snap === true) {\n          cx = Math.round(stepX / 2);\n          cy = Math.round(stepY / 2);\n\n          while (x > -this.scrollerWidth) {\n            this.pages[i] = [];\n            l = 0;\n            y = 0;\n\n            while (y > -this.scrollerHeight) {\n              this.pages[i][l] = {\n                x: Math.max(x, this.maxScrollX),\n                y: Math.max(y, this.maxScrollY),\n                width: stepX,\n                height: stepY,\n                cx: x - cx,\n                cy: y - cy\n              };\n              y -= stepY;\n              l++;\n            }\n\n            x -= stepX;\n            i++;\n          }\n        } else {\n          el = this.options.snap;\n          l = el.length;\n          n = -1;\n\n          for (; i < l; i++) {\n            if (i === 0 || el[i].offsetLeft <= el[i - 1].offsetLeft) {\n              m = 0;\n              n++;\n            }\n\n            if (!this.pages[m]) {\n              this.pages[m] = [];\n            }\n\n            x = Math.max(-el[i].offsetLeft, this.maxScrollX);\n            y = Math.max(-el[i].offsetTop, this.maxScrollY);\n            cx = x - Math.round(el[i].offsetWidth / 2);\n            cy = y - Math.round(el[i].offsetHeight / 2);\n            this.pages[m][n] = {\n              x: x,\n              y: y,\n              width: el[i].offsetWidth,\n              height: el[i].offsetHeight,\n              cx: cx,\n              cy: cy\n            };\n\n            if (x > this.maxScrollX) {\n              m++;\n            }\n          }\n        }\n\n        this.goToPage(this.currentPage.pageX || 0, this.currentPage.pageY || 0, 0); // Update snap threshold if needed\n\n        if (this.options.snapThreshold % 1 === 0) {\n          this.snapThresholdX = this.options.snapThreshold;\n          this.snapThresholdY = this.options.snapThreshold;\n        } else {\n          this.snapThresholdX = Math.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].width * this.options.snapThreshold);\n          this.snapThresholdY = Math.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].height * this.options.snapThreshold);\n        }\n      });\n      this.on('flick', function () {\n        var time = this.options.snapSpeed || Math.max(Math.max(Math.min(Math.abs(this.x - this.startX), 1000), Math.min(Math.abs(this.y - this.startY), 1000)), 300);\n        this.goToPage(this.currentPage.pageX + this.directionX, this.currentPage.pageY + this.directionY, time);\n      });\n    },\n    _nearestSnap: function (x, y) {\n      if (!this.pages.length) {\n        return {\n          x: 0,\n          y: 0,\n          pageX: 0,\n          pageY: 0\n        };\n      }\n\n      var i = 0,\n          l = this.pages.length,\n          m = 0; // Check if we exceeded the snap threshold\n\n      if (Math.abs(x - this.absStartX) < this.snapThresholdX && Math.abs(y - this.absStartY) < this.snapThresholdY) {\n        return this.currentPage;\n      }\n\n      if (x > 0) {\n        x = 0;\n      } else if (x < this.maxScrollX) {\n        x = this.maxScrollX;\n      }\n\n      if (y > 0) {\n        y = 0;\n      } else if (y < this.maxScrollY) {\n        y = this.maxScrollY;\n      }\n\n      for (; i < l; i++) {\n        if (x >= this.pages[i][0].cx) {\n          x = this.pages[i][0].x;\n          break;\n        }\n      }\n\n      l = this.pages[i].length;\n\n      for (; m < l; m++) {\n        if (y >= this.pages[0][m].cy) {\n          y = this.pages[0][m].y;\n          break;\n        }\n      }\n\n      if (i == this.currentPage.pageX) {\n        i += this.directionX;\n\n        if (i < 0) {\n          i = 0;\n        } else if (i >= this.pages.length) {\n          i = this.pages.length - 1;\n        }\n\n        x = this.pages[i][0].x;\n      }\n\n      if (m == this.currentPage.pageY) {\n        m += this.directionY;\n\n        if (m < 0) {\n          m = 0;\n        } else if (m >= this.pages[0].length) {\n          m = this.pages[0].length - 1;\n        }\n\n        y = this.pages[0][m].y;\n      }\n\n      return {\n        x: x,\n        y: y,\n        pageX: i,\n        pageY: m\n      };\n    },\n    goToPage: function (x, y, time, easing) {\n      easing = easing || this.options.bounceEasing;\n\n      if (x >= this.pages.length) {\n        x = this.pages.length - 1;\n      } else if (x < 0) {\n        x = 0;\n      }\n\n      if (y >= this.pages[x].length) {\n        y = this.pages[x].length - 1;\n      } else if (y < 0) {\n        y = 0;\n      }\n\n      var posX = this.pages[x][y].x,\n          posY = this.pages[x][y].y;\n      time = time === undefined ? this.options.snapSpeed || Math.max(Math.max(Math.min(Math.abs(posX - this.x), 1000), Math.min(Math.abs(posY - this.y), 1000)), 300) : time;\n      this.currentPage = {\n        x: posX,\n        y: posY,\n        pageX: x,\n        pageY: y\n      };\n      this.scrollTo(posX, posY, time, easing);\n    },\n    next: function (time, easing) {\n      var x = this.currentPage.pageX,\n          y = this.currentPage.pageY;\n      x++;\n\n      if (x >= this.pages.length && this.hasVerticalScroll) {\n        x = 0;\n        y++;\n      }\n\n      this.goToPage(x, y, time, easing);\n    },\n    prev: function (time, easing) {\n      var x = this.currentPage.pageX,\n          y = this.currentPage.pageY;\n      x--;\n\n      if (x < 0 && this.hasVerticalScroll) {\n        x = 0;\n        y--;\n      }\n\n      this.goToPage(x, y, time, easing);\n    },\n    _initKeys: function (e) {\n      // default key bindings\n      var keys = {\n        pageUp: 33,\n        pageDown: 34,\n        end: 35,\n        home: 36,\n        left: 37,\n        up: 38,\n        right: 39,\n        down: 40\n      };\n      var i; // if you give me characters I give you keycode\n\n      if (typeof this.options.keyBindings == 'object') {\n        for (i in this.options.keyBindings) {\n          if (typeof this.options.keyBindings[i] == 'string') {\n            this.options.keyBindings[i] = this.options.keyBindings[i].toUpperCase().charCodeAt(0);\n          }\n        }\n      } else {\n        this.options.keyBindings = {};\n      }\n\n      for (i in keys) {\n        this.options.keyBindings[i] = this.options.keyBindings[i] || keys[i];\n      }\n\n      utils.addEvent(window, 'keydown', this);\n      this.on('destroy', function () {\n        utils.removeEvent(window, 'keydown', this);\n      });\n    },\n    _key: function (e) {\n      if (!this.enabled) {\n        return;\n      }\n\n      var snap = this.options.snap,\n          // we are using this alot, better to cache it\n      newX = snap ? this.currentPage.pageX : this.x,\n          newY = snap ? this.currentPage.pageY : this.y,\n          now = utils.getTime(),\n          prevTime = this.keyTime || 0,\n          acceleration = 0.250,\n          pos;\n\n      if (this.options.useTransition && this.isInTransition) {\n        pos = this.getComputedPosition();\n\n        this._translate(Math.round(pos.x), Math.round(pos.y));\n\n        this.isInTransition = false;\n      }\n\n      this.keyAcceleration = now - prevTime < 200 ? Math.min(this.keyAcceleration + acceleration, 50) : 0;\n\n      switch (e.keyCode) {\n        case this.options.keyBindings.pageUp:\n          if (this.hasHorizontalScroll && !this.hasVerticalScroll) {\n            newX += snap ? 1 : this.wrapperWidth;\n          } else {\n            newY += snap ? 1 : this.wrapperHeight;\n          }\n\n          break;\n\n        case this.options.keyBindings.pageDown:\n          if (this.hasHorizontalScroll && !this.hasVerticalScroll) {\n            newX -= snap ? 1 : this.wrapperWidth;\n          } else {\n            newY -= snap ? 1 : this.wrapperHeight;\n          }\n\n          break;\n\n        case this.options.keyBindings.end:\n          newX = snap ? this.pages.length - 1 : this.maxScrollX;\n          newY = snap ? this.pages[0].length - 1 : this.maxScrollY;\n          break;\n\n        case this.options.keyBindings.home:\n          newX = 0;\n          newY = 0;\n          break;\n\n        case this.options.keyBindings.left:\n          newX += snap ? -1 : 5 + this.keyAcceleration >> 0;\n          break;\n\n        case this.options.keyBindings.up:\n          newY += snap ? 1 : 5 + this.keyAcceleration >> 0;\n          break;\n\n        case this.options.keyBindings.right:\n          newX -= snap ? -1 : 5 + this.keyAcceleration >> 0;\n          break;\n\n        case this.options.keyBindings.down:\n          newY -= snap ? 1 : 5 + this.keyAcceleration >> 0;\n          break;\n\n        default:\n          return;\n      }\n\n      if (snap) {\n        this.goToPage(newX, newY);\n        return;\n      }\n\n      if (newX > 0) {\n        newX = 0;\n        this.keyAcceleration = 0;\n      } else if (newX < this.maxScrollX) {\n        newX = this.maxScrollX;\n        this.keyAcceleration = 0;\n      }\n\n      if (newY > 0) {\n        newY = 0;\n        this.keyAcceleration = 0;\n      } else if (newY < this.maxScrollY) {\n        newY = this.maxScrollY;\n        this.keyAcceleration = 0;\n      }\n\n      this.scrollTo(newX, newY, 0);\n      this.keyTime = now;\n    },\n    _animate: function (destX, destY, duration, easingFn) {\n      var that = this,\n          startX = this.x,\n          startY = this.y,\n          startTime = utils.getTime(),\n          destTime = startTime + duration;\n\n      function step() {\n        var now = utils.getTime(),\n            newX,\n            newY,\n            easing;\n\n        if (now >= destTime) {\n          that.isAnimating = false;\n\n          that._translate(destX, destY);\n\n          if (!that.resetPosition(that.options.bounceTime)) {\n            that._execEvent('scrollEnd');\n          }\n\n          return;\n        }\n\n        now = (now - startTime) / duration;\n        easing = easingFn(now);\n        newX = (destX - startX) * easing + startX;\n        newY = (destY - startY) * easing + startY;\n\n        that._translate(newX, newY);\n\n        if (that.isAnimating) {\n          rAF(step);\n        }\n      }\n\n      this.isAnimating = true;\n      step();\n    },\n    handleEvent: function (e) {\n      switch (e.type) {\n        case 'touchstart':\n        case 'pointerdown':\n        case 'MSPointerDown':\n        case 'mousedown':\n          this._start(e);\n\n          break;\n\n        case 'touchmove':\n        case 'pointermove':\n        case 'MSPointerMove':\n        case 'mousemove':\n          this._move(e);\n\n          break;\n\n        case 'touchend':\n        case 'pointerup':\n        case 'MSPointerUp':\n        case 'mouseup':\n        case 'touchcancel':\n        case 'pointercancel':\n        case 'MSPointerCancel':\n        case 'mousecancel':\n          this._end(e);\n\n          break;\n\n        case 'orientationchange':\n        case 'resize':\n          this._resize();\n\n          break;\n\n        case 'transitionend':\n        case 'webkitTransitionEnd':\n        case 'oTransitionEnd':\n        case 'MSTransitionEnd':\n          this._transitionEnd(e);\n\n          break;\n\n        case 'wheel':\n        case 'DOMMouseScroll':\n        case 'mousewheel':\n          this._wheel(e);\n\n          break;\n\n        case 'keydown':\n          this._key(e);\n\n          break;\n\n        case 'click':\n          if (this.enabled && !e._constructed) {\n            e.preventDefault();\n            e.stopPropagation();\n          }\n\n          break;\n      }\n    }\n  };\n\n  function createDefaultScrollbar(direction, interactive, type) {\n    var scrollbar = document.createElement('div'),\n        indicator = document.createElement('div');\n\n    if (type === true) {\n      scrollbar.style.cssText = 'position:absolute;z-index:9999';\n      indicator.style.cssText = '-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;background:rgba(0,0,0,0.5);border:1px solid rgba(255,255,255,0.9);border-radius:3px';\n    }\n\n    indicator.className = 'iScrollIndicator';\n\n    if (direction == 'h') {\n      if (type === true) {\n        scrollbar.style.cssText += ';height:7px;left:2px;right:2px;bottom:0';\n        indicator.style.height = '100%';\n      }\n\n      scrollbar.className = 'iScrollHorizontalScrollbar';\n    } else {\n      if (type === true) {\n        scrollbar.style.cssText += ';width:7px;bottom:2px;top:2px;right:1px';\n        indicator.style.width = '100%';\n      }\n\n      scrollbar.className = 'iScrollVerticalScrollbar';\n    }\n\n    scrollbar.style.cssText += ';overflow:hidden';\n\n    if (!interactive) {\n      scrollbar.style.pointerEvents = 'none';\n    }\n\n    scrollbar.appendChild(indicator);\n    return scrollbar;\n  }\n\n  function Indicator(scroller, options) {\n    this.wrapper = typeof options.el == 'string' ? document.querySelector(options.el) : options.el;\n    this.wrapperStyle = this.wrapper.style;\n    this.indicator = this.wrapper.children[0];\n    this.indicatorStyle = this.indicator.style;\n    this.scroller = scroller;\n    this.options = {\n      listenX: true,\n      listenY: true,\n      interactive: false,\n      resize: true,\n      defaultScrollbars: false,\n      shrink: false,\n      fade: false,\n      speedRatioX: 0,\n      speedRatioY: 0\n    };\n\n    for (var i in options) {\n      this.options[i] = options[i];\n    }\n\n    this.sizeRatioX = 1;\n    this.sizeRatioY = 1;\n    this.maxPosX = 0;\n    this.maxPosY = 0;\n\n    if (this.options.interactive) {\n      if (!this.options.disableTouch) {\n        utils.addEvent(this.indicator, 'touchstart', this);\n        utils.addEvent(window, 'touchend', this);\n      }\n\n      if (!this.options.disablePointer) {\n        utils.addEvent(this.indicator, utils.prefixPointerEvent('pointerdown'), this);\n        utils.addEvent(window, utils.prefixPointerEvent('pointerup'), this);\n      }\n\n      if (!this.options.disableMouse) {\n        utils.addEvent(this.indicator, 'mousedown', this);\n        utils.addEvent(window, 'mouseup', this);\n      }\n    }\n\n    if (this.options.fade) {\n      this.wrapperStyle[utils.style.transform] = this.scroller.translateZ;\n      var durationProp = utils.style.transitionDuration;\n      this.wrapperStyle[durationProp] = utils.isBadAndroid ? '0.0001ms' : '0ms'; // remove 0.0001ms\n\n      var self = this;\n\n      if (utils.isBadAndroid) {\n        rAF(function () {\n          if (self.wrapperStyle[durationProp] === '0.0001ms') {\n            self.wrapperStyle[durationProp] = '0s';\n          }\n        });\n      }\n\n      this.wrapperStyle.opacity = '0';\n    }\n  }\n\n  Indicator.prototype = {\n    handleEvent: function (e) {\n      switch (e.type) {\n        case 'touchstart':\n        case 'pointerdown':\n        case 'MSPointerDown':\n        case 'mousedown':\n          this._start(e);\n\n          break;\n\n        case 'touchmove':\n        case 'pointermove':\n        case 'MSPointerMove':\n        case 'mousemove':\n          this._move(e);\n\n          break;\n\n        case 'touchend':\n        case 'pointerup':\n        case 'MSPointerUp':\n        case 'mouseup':\n        case 'touchcancel':\n        case 'pointercancel':\n        case 'MSPointerCancel':\n        case 'mousecancel':\n          this._end(e);\n\n          break;\n      }\n    },\n    destroy: function () {\n      if (this.options.fadeScrollbars) {\n        clearTimeout(this.fadeTimeout);\n        this.fadeTimeout = null;\n      }\n\n      if (this.options.interactive) {\n        utils.removeEvent(this.indicator, 'touchstart', this);\n        utils.removeEvent(this.indicator, utils.prefixPointerEvent('pointerdown'), this);\n        utils.removeEvent(this.indicator, 'mousedown', this);\n        utils.removeEvent(window, 'touchmove', this);\n        utils.removeEvent(window, utils.prefixPointerEvent('pointermove'), this);\n        utils.removeEvent(window, 'mousemove', this);\n        utils.removeEvent(window, 'touchend', this);\n        utils.removeEvent(window, utils.prefixPointerEvent('pointerup'), this);\n        utils.removeEvent(window, 'mouseup', this);\n      }\n\n      if (this.options.defaultScrollbars) {\n        this.wrapper.parentNode.removeChild(this.wrapper);\n      }\n    },\n    _start: function (e) {\n      var point = e.touches ? e.touches[0] : e;\n      e.preventDefault();\n      e.stopPropagation();\n      this.transitionTime();\n      this.initiated = true;\n      this.moved = false;\n      this.lastPointX = point.pageX;\n      this.lastPointY = point.pageY;\n      this.startTime = utils.getTime();\n\n      if (!this.options.disableTouch) {\n        utils.addEvent(window, 'touchmove', this);\n      }\n\n      if (!this.options.disablePointer) {\n        utils.addEvent(window, utils.prefixPointerEvent('pointermove'), this);\n      }\n\n      if (!this.options.disableMouse) {\n        utils.addEvent(window, 'mousemove', this);\n      }\n\n      this.scroller._execEvent('beforeScrollStart');\n    },\n    _move: function (e) {\n      var point = e.touches ? e.touches[0] : e,\n          deltaX,\n          deltaY,\n          newX,\n          newY,\n          timestamp = utils.getTime();\n\n      if (!this.moved) {\n        this.scroller._execEvent('scrollStart');\n      }\n\n      this.moved = true;\n      deltaX = point.pageX - this.lastPointX;\n      this.lastPointX = point.pageX;\n      deltaY = point.pageY - this.lastPointY;\n      this.lastPointY = point.pageY;\n      newX = this.x + deltaX;\n      newY = this.y + deltaY;\n\n      this._pos(newX, newY); // INSERT POINT: indicator._move\n\n\n      e.preventDefault();\n      e.stopPropagation();\n    },\n    _end: function (e) {\n      if (!this.initiated) {\n        return;\n      }\n\n      this.initiated = false;\n      e.preventDefault();\n      e.stopPropagation();\n      utils.removeEvent(window, 'touchmove', this);\n      utils.removeEvent(window, utils.prefixPointerEvent('pointermove'), this);\n      utils.removeEvent(window, 'mousemove', this);\n\n      if (this.scroller.options.snap) {\n        var snap = this.scroller._nearestSnap(this.scroller.x, this.scroller.y);\n\n        var time = this.options.snapSpeed || Math.max(Math.max(Math.min(Math.abs(this.scroller.x - snap.x), 1000), Math.min(Math.abs(this.scroller.y - snap.y), 1000)), 300);\n\n        if (this.scroller.x != snap.x || this.scroller.y != snap.y) {\n          this.scroller.directionX = 0;\n          this.scroller.directionY = 0;\n          this.scroller.currentPage = snap;\n          this.scroller.scrollTo(snap.x, snap.y, time, this.scroller.options.bounceEasing);\n        }\n      }\n\n      if (this.moved) {\n        this.scroller._execEvent('scrollEnd');\n      }\n    },\n    transitionTime: function (time) {\n      time = time || 0;\n      var durationProp = utils.style.transitionDuration;\n      this.indicatorStyle[durationProp] = time + 'ms';\n\n      if (!time && utils.isBadAndroid) {\n        this.indicatorStyle[durationProp] = '0.0001ms'; // remove 0.0001ms\n\n        var self = this;\n        rAF(function () {\n          if (self.indicatorStyle[durationProp] === '0.0001ms') {\n            self.indicatorStyle[durationProp] = '0s';\n          }\n        });\n      }\n    },\n    transitionTimingFunction: function (easing) {\n      this.indicatorStyle[utils.style.transitionTimingFunction] = easing;\n    },\n    refresh: function () {\n      this.transitionTime();\n\n      if (this.options.listenX && !this.options.listenY) {\n        this.indicatorStyle.display = this.scroller.hasHorizontalScroll ? 'block' : 'none';\n      } else if (this.options.listenY && !this.options.listenX) {\n        this.indicatorStyle.display = this.scroller.hasVerticalScroll ? 'block' : 'none';\n      } else {\n        this.indicatorStyle.display = this.scroller.hasHorizontalScroll || this.scroller.hasVerticalScroll ? 'block' : 'none';\n      }\n\n      if (this.scroller.hasHorizontalScroll && this.scroller.hasVerticalScroll) {\n        utils.addClass(this.wrapper, 'iScrollBothScrollbars');\n        utils.removeClass(this.wrapper, 'iScrollLoneScrollbar');\n\n        if (this.options.defaultScrollbars && this.options.customStyle) {\n          if (this.options.listenX) {\n            this.wrapper.style.right = '8px';\n          } else {\n            this.wrapper.style.bottom = '8px';\n          }\n        }\n      } else {\n        utils.removeClass(this.wrapper, 'iScrollBothScrollbars');\n        utils.addClass(this.wrapper, 'iScrollLoneScrollbar');\n\n        if (this.options.defaultScrollbars && this.options.customStyle) {\n          if (this.options.listenX) {\n            this.wrapper.style.right = '2px';\n          } else {\n            this.wrapper.style.bottom = '2px';\n          }\n        }\n      }\n\n      var r = this.wrapper.offsetHeight; // force refresh\n\n      if (this.options.listenX) {\n        this.wrapperWidth = this.wrapper.clientWidth;\n\n        if (this.options.resize) {\n          this.indicatorWidth = Math.max(Math.round(this.wrapperWidth * this.wrapperWidth / (this.scroller.scrollerWidth || this.wrapperWidth || 1)), 8);\n          this.indicatorStyle.width = this.indicatorWidth + 'px';\n        } else {\n          this.indicatorWidth = this.indicator.clientWidth;\n        }\n\n        this.maxPosX = this.wrapperWidth - this.indicatorWidth;\n\n        if (this.options.shrink == 'clip') {\n          this.minBoundaryX = -this.indicatorWidth + 8;\n          this.maxBoundaryX = this.wrapperWidth - 8;\n        } else {\n          this.minBoundaryX = 0;\n          this.maxBoundaryX = this.maxPosX;\n        }\n\n        this.sizeRatioX = this.options.speedRatioX || this.scroller.maxScrollX && this.maxPosX / this.scroller.maxScrollX;\n      }\n\n      if (this.options.listenY) {\n        this.wrapperHeight = this.wrapper.clientHeight;\n\n        if (this.options.resize) {\n          this.indicatorHeight = Math.max(Math.round(this.wrapperHeight * this.wrapperHeight / (this.scroller.scrollerHeight || this.wrapperHeight || 1)), 8);\n          this.indicatorStyle.height = this.indicatorHeight + 'px';\n        } else {\n          this.indicatorHeight = this.indicator.clientHeight;\n        }\n\n        this.maxPosY = this.wrapperHeight - this.indicatorHeight;\n\n        if (this.options.shrink == 'clip') {\n          this.minBoundaryY = -this.indicatorHeight + 8;\n          this.maxBoundaryY = this.wrapperHeight - 8;\n        } else {\n          this.minBoundaryY = 0;\n          this.maxBoundaryY = this.maxPosY;\n        }\n\n        this.maxPosY = this.wrapperHeight - this.indicatorHeight;\n        this.sizeRatioY = this.options.speedRatioY || this.scroller.maxScrollY && this.maxPosY / this.scroller.maxScrollY;\n      }\n\n      this.updatePosition();\n    },\n    updatePosition: function () {\n      var x = this.options.listenX && Math.round(this.sizeRatioX * this.scroller.x) || 0,\n          y = this.options.listenY && Math.round(this.sizeRatioY * this.scroller.y) || 0;\n\n      if (!this.options.ignoreBoundaries) {\n        if (x < this.minBoundaryX) {\n          if (this.options.shrink == 'scale') {\n            this.width = Math.max(this.indicatorWidth + x, 8);\n            this.indicatorStyle.width = this.width + 'px';\n          }\n\n          x = this.minBoundaryX;\n        } else if (x > this.maxBoundaryX) {\n          if (this.options.shrink == 'scale') {\n            this.width = Math.max(this.indicatorWidth - (x - this.maxPosX), 8);\n            this.indicatorStyle.width = this.width + 'px';\n            x = this.maxPosX + this.indicatorWidth - this.width;\n          } else {\n            x = this.maxBoundaryX;\n          }\n        } else if (this.options.shrink == 'scale' && this.width != this.indicatorWidth) {\n          this.width = this.indicatorWidth;\n          this.indicatorStyle.width = this.width + 'px';\n        }\n\n        if (y < this.minBoundaryY) {\n          if (this.options.shrink == 'scale') {\n            this.height = Math.max(this.indicatorHeight + y * 3, 8);\n            this.indicatorStyle.height = this.height + 'px';\n          }\n\n          y = this.minBoundaryY;\n        } else if (y > this.maxBoundaryY) {\n          if (this.options.shrink == 'scale') {\n            this.height = Math.max(this.indicatorHeight - (y - this.maxPosY) * 3, 8);\n            this.indicatorStyle.height = this.height + 'px';\n            y = this.maxPosY + this.indicatorHeight - this.height;\n          } else {\n            y = this.maxBoundaryY;\n          }\n        } else if (this.options.shrink == 'scale' && this.height != this.indicatorHeight) {\n          this.height = this.indicatorHeight;\n          this.indicatorStyle.height = this.height + 'px';\n        }\n      }\n\n      this.x = x;\n      this.y = y;\n\n      if (this.scroller.options.useTransform) {\n        this.indicatorStyle[utils.style.transform] = 'translate(' + x + 'px,' + y + 'px)' + this.scroller.translateZ;\n      } else {\n        this.indicatorStyle.left = x + 'px';\n        this.indicatorStyle.top = y + 'px';\n      }\n    },\n    _pos: function (x, y) {\n      if (x < 0) {\n        x = 0;\n      } else if (x > this.maxPosX) {\n        x = this.maxPosX;\n      }\n\n      if (y < 0) {\n        y = 0;\n      } else if (y > this.maxPosY) {\n        y = this.maxPosY;\n      }\n\n      x = this.options.listenX ? Math.round(x / this.sizeRatioX) : this.scroller.x;\n      y = this.options.listenY ? Math.round(y / this.sizeRatioY) : this.scroller.y;\n      this.scroller.scrollTo(x, y);\n    },\n    fade: function (val, hold) {\n      if (hold && !this.visible) {\n        return;\n      }\n\n      clearTimeout(this.fadeTimeout);\n      this.fadeTimeout = null;\n      var time = val ? 250 : 500,\n          delay = val ? 0 : 300;\n      val = val ? '1' : '0';\n      this.wrapperStyle[utils.style.transitionDuration] = time + 'ms';\n      this.fadeTimeout = setTimeout(function (val) {\n        this.wrapperStyle.opacity = val;\n        this.visible = +val;\n      }.bind(this, val), delay);\n    }\n  };\n  IScroll.utils = utils;\n\n  if ( true && module.exports) {\n    module.exports = IScroll;\n  } else if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return IScroll;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, document, Math);\n\n//# sourceURL=webpack:///./node_modules/iscroll/build/iscroll.js?");

/***/ }),

/***/ "./node_modules/touchmyripple/index.js":
/*!*********************************************!*\
  !*** ./node_modules/touchmyripple/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Default Settings\n\nvar settings = {\n  area: \"\",\n  color: \"rgba(255, 255, 255, 0.4)\",\n  offsetEl: null,\n  eventListener: \"click\",\n  mouseMove: false\n};\n/**\n * @description Where the magic happens\n * @param {object} e\n * @param {string} rippleColor\n * @param {string} eventListener\n */\n\nfunction ripple(e, rippleColor, eventListener) {\n  var clickedEl = e.currentTarget;\n  var PageX = eventListener.match(/touch/) ? e.changedTouches[0].pageX : e.clientX;\n  var PageY = eventListener.match(/touch/) ? e.changedTouches[0].pageY : e.clientY;\n  var btnWidth = clickedEl.clientWidth;\n  var el = clickedEl.getBoundingClientRect();\n  var rippleOffset = settings.offsetEl ? settings.offsetEl.clientHeight : 0;\n  var btnOffsetTop = el.top + rippleOffset;\n  var btnOffsetLeft = el.left;\n  var posMouseX = PageX;\n  var posMouseY = PageY + rippleOffset;\n  var rippleX = posMouseX - btnOffsetLeft;\n  var rippleY = posMouseY - btnOffsetTop;\n  var baseCSS = \"\\n          position: absolute;\\n          width: \" + btnWidth * 2 + \"px;\\n          height: \" + btnWidth * 2 + \"px;\\n          border-radius: 50%;\\n          transition: transform 700ms, opacity 700ms;\\n          transition-timing-function: cubic-bezier(0.250, 0.460, 0.450, 0.940);\\n          background: \" + rippleColor + \";\\n          background-position: center;\\n          background-repeat: no-repeat;\\n          background-size: 100%;\\n          left: \" + (rippleX - btnWidth) + \"px;\\n          top: \" + (rippleY - btnWidth) + \"px;\\n          transform: scale(0);\\n          pointer-events: none;\\n      \"; // Prepare the dom\n\n  var rippleEffect = document.createElement(\"span\");\n  rippleEffect.style.cssText = baseCSS; // Add some css for prevent overflow errors\n\n  clickedEl.style.overflow = \"hidden\"; // Check if the element is not static because the ripple is in absolute\n\n  if (window.getComputedStyle(clickedEl).position === \"static\") {\n    clickedEl.style.position = \"relative\";\n  } // Check for the mousemove event\n\n\n  if (settings.mouseMove) {\n    settings.mouseMove = false;\n    return;\n  }\n\n  clickedEl.appendChild(rippleEffect); // start animation\n\n  setTimeout(function () {\n    rippleEffect.style.cssText = baseCSS + \" transform: scale(1); opacity: 0;\";\n  }, 50);\n  setTimeout(function () {\n    rippleEffect.remove();\n  }, 700);\n}\n/**\n * @description Prevent ripple when scrolling (Mobile Only)\n * @param {string} eventListener\n */\n\n\nfunction onDrag(eventListener) {\n  if (eventListener === \"touchend\") {\n    document.getElementsByTagName(\"body\")[0].addEventListener(\"touchmove\", function () {\n      settings.mouseMove = true;\n    });\n  }\n}\n\nfunction attachRipple(els, rippleColor, eventListener) {\n  for (var i = 0; i < els.length; i += 1) {\n    var currentBtn = els[i];\n    currentBtn.addEventListener(eventListener, function (e) {\n      return ripple(e, rippleColor, eventListener);\n    });\n  }\n}\n\nfunction attachRippleToAttribute(area, rippleColor, eventListener) {\n  var attributeEl = document.querySelectorAll(area + \" [data-animation='ripple']\");\n\n  if (attributeEl.length > 0) {\n    attachRipple(attributeEl, rippleColor, eventListener);\n  } else {\n    throw new Error('not found any element with data-animation=\"ripple\"');\n  }\n}\n\nfunction attachRippleToSelectors(selectors, rippleColor, eventListener) {\n  if (selectors) {\n    var selectorsEl = document.querySelectorAll(selectors);\n  } else {\n    throw new Error(\"You have to enter at least 1 selector\");\n  }\n\n  if (selectorsEl.length > 0) {\n    attachRipple(selectorsEl, rippleColor, eventListener);\n  } else {\n    console.warn(\"No element found with this selector: \", selectors);\n  }\n}\n\nmodule.exports = {\n  init: function init() {\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    try {\n      var area = settings.area,\n          color = settings.color,\n          offsetEl = settings.offsetEl,\n          eventListener = settings.eventListener;\n      area = data.area || area;\n      color = data.color || color;\n      offsetEl = data.offsetEl ? this.setOffsetEl(data.offsetEl) : offsetEl;\n      eventListener = data.eventListener || eventListener;\n      onDrag(eventListener);\n      attachRippleToAttribute(area, color, eventListener);\n    } catch (e) {\n      console.warn(e.message);\n    }\n  },\n  attachToSelectors: function attachToSelectors() {\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    try {\n      var elSetting = {\n        color: data.color || settings.color,\n        eventListener: data.eventListener || settings.eventListener\n      };\n      var color = elSetting.color,\n          eventListener = elSetting.eventListener;\n      attachRippleToSelectors(data.selectors, color, eventListener);\n    } catch (e) {\n      console.warn(e.message);\n    }\n  },\n  setOffsetEl: function setOffsetEl(el) {\n    settings.offsetEl = document.querySelector(el);\n  },\n  ripple: ripple\n};\n\n//# sourceURL=webpack:///./node_modules/touchmyripple/index.js?");

/***/ }),

/***/ "./src/js/iscroll.js":
/*!***************************!*\
  !*** ./src/js/iscroll.js ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var iscroll__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! iscroll */ \"./node_modules/iscroll/build/iscroll.js\");\n/* harmony import */ var iscroll__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(iscroll__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (class {\n  constructor(element = null, options = {}) {\n    if (!element) {\n      throw '\\'Element\\' cannot be undefined';\n    }\n\n    this.element = element;\n    this.iscroll = new iscroll__WEBPACK_IMPORTED_MODULE_0___default.a(this.element, options);\n  }\n\n});\n\n//# sourceURL=webpack:///./src/js/iscroll.js?");

/***/ }),

/***/ "./src/js/tmripple.js":
/*!****************************!*\
  !*** ./src/js/tmripple.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var touchmyripple__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! touchmyripple */ \"./node_modules/touchmyripple/index.js\");\n/* harmony import */ var touchmyripple__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(touchmyripple__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (class {\n  constructor(selectors = '', options = {}) {\n    if (!selectors) {\n      throw '\\'Selector\\' cannot be empty';\n    }\n\n    this.selectors = selectors;\n    this.init(options);\n  }\n\n  init(options) {\n    touchmyripple__WEBPACK_IMPORTED_MODULE_0___default.a.attachToSelectors(Object.assign({}, options, {\n      selectors: this.selectors\n    }));\n  }\n\n});\n\n//# sourceURL=webpack:///./src/js/tmripple.js?");

/***/ })

/******/ });